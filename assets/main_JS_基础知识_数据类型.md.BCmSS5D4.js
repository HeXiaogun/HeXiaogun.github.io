import{_ as o,c as l,o as d,ae as c}from"./chunks/framework.Dh1jimFm.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-20T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/JS/基础知识/数据类型.md","filePath":"main/JS/基础知识/数据类型.md","lastUpdated":1746068392000}'),i={name:"main/JS/基础知识/数据类型.md"};function t(n,e,a,r,_,s){return d(),l("div",null,e[0]||(e[0]=[c("<p>JS的8中基本数据类型（7个原始数据类型和一个引用类型） 我们可以将任何类型的值存入变量。例如，一个变量可以在前一刻是个字符串，下一刻就存储一个数字</p><ol><li>Number类型 <ol><li>整数和浮点数，还有特殊数值：<code>Infinity</code>（无穷大）、<code>-Infinity</code> 和 <code>NaN</code>（计算错误，。任何对 <code>NaN</code> 的进一步数学运算都会返回 <code>NaN</code>，只有一个例外：<code>NaN ** 0</code> 结果为 <code>1</code>）。</li></ol></li><li>BigInt类型 2. “number” 类型无法安全地表示大于 <code>(253-1)</code>（即 <code>9007199254740991</code>），或小于 <code>-(253-1)</code> 的整数。 3. 表示任意长度的整数，可以用于密码学或微秒精度的时间戳。 4. 可以通过将 <code>n</code> 附加到整数字段的末尾来创建 <code>BigInt</code> 值。</li><li>String类型 <ol><li>必须在引号里</li><li><ol><li>双引号：<code>&quot;Hello&quot;</code>.</li></ol></li><li>单引号：<code>&#39;Hello&#39;</code>.</li><li>反引号：<code>`Hello`</code>. <code>${……}</code></li><li>只有一种 <code>string</code> 类型，一个字符串可以包含零个（为空）、一个或多个字符。，没有char</li></ol></li><li>Boolean类型 6. boolean 类型仅包含两个值：<code>true</code> 和 <code>false</code>。</li><li>null值 <ol><li>特殊的 <code>null</code> 值不属于上述任何一种类型。它构成了一个独立的类型，只包含 <code>null</code> 值。</li><li>JavaScript 中的 <code>null</code> 仅仅是一个代表“无”、“空”或“值未知”的特殊值。</li></ol></li><li>undefined值 <ol><li><code>undefined</code> 的含义是 <code>未被赋值</code>。如果一个变量已被声明，但未被赋值，那么它的值就是 <code>undefined</code>。</li></ol></li><li>Object类型 <ol><li><code>object</code> 则用于储存数据集合和更复杂的实体。</li></ol></li><li>Symbol类型 2. <code>symbol</code> 类型用于创建对象的唯一标识符。我们在这里提到 <code>symbol</code> 类型是为了完整性</li><li>typeof 运算符 <ol><li>速进行数据类型检验时，非常有用。<code>typeof</code> 运算符返回参数的类型。</li><li><code>typeof(x)</code>与 <code>typeof x</code> 相同。</li></ol></li></ol>",2)]))}const m=o(i,[["render",t]]);export{f as __pageData,m as default};
