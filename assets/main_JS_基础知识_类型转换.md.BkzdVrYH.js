import{_ as t,c as l,o as d,ae as o}from"./chunks/framework.Dh1jimFm.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-20T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/JS/基础知识/类型转换.md","filePath":"main/JS/基础知识/类型转换.md","lastUpdated":1746068392000}'),a={name:"main/JS/基础知识/类型转换.md"};function i(r,e,c,n,u,_){return d(),l("div",null,e[0]||(e[0]=[o('<p>大多数情况下，运算符和函数会自动将赋予它们的值转换为正确的类型。例如：<code>alert</code> 会自动将任何值都转换为字符串以进行显示。算术运算符会将值转换为数字。</p><ol><li>字符串转换 <ol><li><code>String(value)</code> 来将 <code>value</code> 转换为字符串类型</li></ol></li><li>数字类型转换 <ol><li>在算术函数或者表达式中，会自动number类型转换，例如：除法”/&quot;</li><li><code>Number(value)</code> 显式地将这个 <code>value</code> 转换为 number 类型。</li><li>如果非数字类型不是一个有效数字，转换的结果是NaN</li><li>number类型转换规则</li></ol></li></ol><table tabindex="0"><thead><tr><th>值</th><th>变成……</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>0</td></tr><tr><td>true和false</td><td>1和0</td></tr><tr><td>String</td><td>去掉首尾空白字符（空格、换行符 \\n、制表符 \\t 等）后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 0。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 NaN。</td></tr></tbody></table><ol start="3"><li>布尔类型转换 <ol><li>在逻辑运算，或者通过调用 Boolean(value) 显式地进行转换。</li><li><ul><li>直观上为“空”的值（如 <code>0</code>、空字符串、<code>null</code>、<code>undefined</code> 和 <code>NaN</code>）将变为 <code>false</code>。</li></ul></li><li><ul><li>其他值变成 <code>true</code>。</li></ul></li><li>包含 0 的字符串 <code>&quot;0&quot;</code> 是 <code>true</code></li></ol></li></ol>',4)]))}const p=t(a,[["render",i]]);export{m as __pageData,p as default};
