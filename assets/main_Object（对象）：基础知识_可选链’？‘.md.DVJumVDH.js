import{_ as o,c as d,o as l,ae as c}from"./chunks/framework.Dh1jimFm.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-23T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/Object（对象）：基础知识/可选链’？‘.md","filePath":"main/Object（对象）：基础知识/可选链’？‘.md","lastUpdated":1746186059000}'),i={name:"main/Object（对象）：基础知识/可选链’？‘.md"};function t(a,e,s,r,_,n){return l(),d("div",null,e[0]||(e[0]=[c("<p>这是一个最近添加到 JavaScript 的特性。 旧式浏览器可能需要 polyfills. 可选链 <code>?.</code> 是一种访问嵌套对象属性的安全的方式。即使中间的属性不存在，也不会出现错误。</p><ol><li>“不存在的属性”的问题 <ol><li>如果一个实例对象的某个属性值没有，但是又不想程序报错，可以：user<code>.</code>address <code>&amp;&amp;</code> user<code>.</code>address<code>.</code>street <code>&amp;&amp;</code> user<code>.</code>address<code>.</code>street<code>.</code>name</li></ol></li><li>可选链 <ol><li><strong>为了简明起见，在本文接下来的内容中，我们会说如果一个属性既不是 <code>null</code> 也不是 <code>undefined</code>，那么它就“存在”。</strong></li><li>user<code>?.</code>address<code>?.</code>street</li></ol></li><li>不要过度使用可选链 <ol><li>我们应该只将 <code>?.</code> 使用在一些东西可以不存在的地方。</li></ol></li><li><code>?.</code> 前的变量必须已声明</li><li>短路效应 <ol><li>正如前面所说的，如果 <code>?.</code> 左边部分不存在，就会立即停止运算（“短路效应”）。</li></ol></li><li>其它变体：?.()，?.[]</li><li>可选链 <code>?.</code> 不是一个运算符，而是一个特殊的语法结构。它还可以与函数和方括号一起使用。 <ol><li>将 <code>?.()</code> 用于调用一个可能不存在的函数。</li></ol></li><li>我们可以使用 ?. 来安全地读取或删除，但不能写入</li><li>可选链 <code>?.</code> 不能用在赋值语句的左侧。</li></ol>",2)]))}const u=o(i,[["render",t]]);export{m as __pageData,u as default};
