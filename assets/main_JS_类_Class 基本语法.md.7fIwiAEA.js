import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-25T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/JS/类/Class 基本语法.md","filePath":"main/JS/类/Class 基本语法.md","lastUpdated":1746068392000}'),t={name:"main/JS/类/Class 基本语法.md"};function e(p,s,r,h,o,k){return n(),a("div",null,s[0]||(s[0]=[l(`<ol><li><strong>“class” 语法</strong></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	  // class 方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  method1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  method2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  method3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><pre><code>1. 类的方法之间没有逗号
</code></pre><ol><li><strong>什么是 class？</strong><ol><li>在 JavaScript 中，类是一种函数。</li></ol></li><li><strong>不仅仅是语法糖</strong><ol><li>类方法不可枚举。</li><li>类总是使用 <code>use strict</code></li><li>首先，通过 <code>class</code> 创建的函数具有特殊的内部属性标记 <code>[[IsClassConstructor]]: true</code>。</li></ol></li><li><strong>类表达式</strong><ol><li>就像函数一样，类可以在另外一个表达式中被定义，被传递，被返回，被赋值等。</li><li>类似于命名函数表达式（Named Function Expressions），类表达式可能也应该有一个名字。</li></ol></li><li><strong>Getters/setters</strong><ol><li>就像对象字面量，类可能包括 getters/setters，计算属性（computed properties）等。</li></ol></li><li><strong>计算属性名称 […]</strong></li><li><strong>Class 字段</strong><ol><li>使用类字段制作绑定方法</li><li>正如 <a href="https://zh.javascript.info/bind" target="_blank" rel="noreferrer">函数绑定</a> 一章中所讲的，JavaScript 中的函数具有动态的 <code>this</code>。</li></ol></li></ol>`,4)]))}const g=i(t,[["render",e]]);export{c as __pageData,g as default};
