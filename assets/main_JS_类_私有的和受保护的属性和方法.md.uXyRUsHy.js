import{_ as l,c as o,o as i,ae as e}from"./chunks/framework.Dh1jimFm.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-25T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/JS/类/私有的和受保护的属性和方法.md","filePath":"main/JS/类/私有的和受保护的属性和方法.md","lastUpdated":1746068392000}'),r={name:"main/JS/类/私有的和受保护的属性和方法.md"};function s(n,t,_,a,g,d){return i(),o("div",null,t[0]||(t[0]=[e("<p>面向对象编程最重要的原则之一 —— 将内部接口与外部接口分隔开来。</p><ol><li><strong>一个现实生活中的例子</strong></li><li><strong>内部接口和外部接口</strong><ol><li><ul><li><strong>内部接口</strong> —— 可以通过该类的其他方法访问，但不能从外部访问的方法和属性。</li></ul></li><li><ul><li><strong>外部接口</strong> —— 也可以从类的外部访问的方法和属性。</li></ul></li></ol></li><li><strong>受保护的 “waterAmount”</strong><ol><li><strong>受保护的属性通常以下划线 <code>_</code> 作为前缀。</strong></li></ol></li><li><strong>只读的 “power”</strong><ol><li>对于 <code>power</code> 属性，让我们将它设为只读。有时候一个属性必须只能被在创建时进行设置，之后不再被修改。</li><li>getter/setter 函数</li><li>受保护的字段是可以被继承的</li></ol></li><li><strong>私有的 “#waterLimit”</strong><ol><li>私有字段不能通过 this[name] 访问</li><li></li></ol></li></ol>",2)]))}const m=l(r,[["render",s]]);export{p as __pageData,m as default};
