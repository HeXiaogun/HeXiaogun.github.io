import{_ as t,c as l,o as i,ae as o}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-29T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/JS/浏览器：文档，事件，接口/Document/特性和属性（Attributes and properties）.md","filePath":"main/JS/浏览器：文档，事件，接口/Document/特性和属性（Attributes and properties）.md","lastUpdated":1746068392000}'),r={name:"main/JS/浏览器：文档，事件，接口/Document/特性和属性（Attributes and properties）.md"};function a(s,e,n,d,c,_){return i(),l("div",null,e[0]||(e[0]=[o("<p>当浏览器加载页面时，它会“读取”（或者称之为：“解析”）HTML 并从中生成 DOM 对象。对于元素节点，大多数标准的 HTML 特性（attributes）会自动变成 DOM 对象的属性（properties）。</p><ol><li><strong>DOM 属性</strong><ol><li>DOM 节点是常规的 JavaScript 对象。我们可以更改它们。</li><li>DOM 属性和方法的行为就像常规的 Javascript 对象一样 <ol><li><ul><li>它们可以有很多值。</li></ul></li><li><ul><li>它们是大小写敏感的（要写成 <code>elem.nodeType</code>，而不是 <code>elem.NoDeTyPe</code>）。</li></ul></li></ol></li></ol></li><li><strong>HTML 特性</strong><ol><li>在 HTML 中，标签可能拥有特性（attributes）。当浏览器解析 HTML 文本，并根据标签创建 DOM 对象时，浏览器会辨别 <strong>标准的</strong> 特性并以此创建 DOM 属性。</li><li>所以，当一个元素有 <code>id</code> 或其他 <strong>标准的</strong> 特性，那么就会生成对应的 DOM 属性。但是非 <strong>标准的</strong> 特性则不会。</li><li>所有特性都可以通过使用以下方法进行访问 <ul><li><code>elem.hasAttribute(name)</code> —— 检查特性是否存在。</li><li><code>elem.getAttribute(name)</code> —— 获取这个特性值。</li><li><code>elem.setAttribute(name, value)</code> —— 设置这个特性值。</li><li><code>elem.removeAttribute(name)</code> —— 移除这个特性。</li></ul></li><li>HTML 特性有以下几个特征 <ul><li>它们的名字是大小写不敏感的（<code>id</code> 与 <code>ID</code> 相同）。</li><li>它们的值总是字符串类型的。</li></ul></li></ol></li><li><strong>属性—特性同步</strong><ol><li>当一个标准的特性被改变，对应的属性也会自动更新，（除了几个特例）反之亦然。</li></ol></li><li><strong>DOM 属性是多类型的</strong><ol><li>DOM 属性不总是字符串类型的。</li></ol></li><li><strong>非标准的特性，dataset</strong><ol><li>有时，非标准的特性常常用于将自定义的数据从 HTML 传递到 JavaScript，或者用于为 JavaScript “标记” HTML 元素。</li><li><strong>所有以 “data-” 开头的特性均被保留供程序员使用。它们可在 <code>dataset</code> 属性中使用。</strong></li></ol></li></ol>",2)]))}const m=t(r,[["render",a]]);export{u as __pageData,m as default};
