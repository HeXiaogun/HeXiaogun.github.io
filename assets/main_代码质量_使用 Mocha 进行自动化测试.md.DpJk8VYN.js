import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.Dh1jimFm.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-23T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/代码质量/使用 Mocha 进行自动化测试.md","filePath":"main/代码质量/使用 Mocha 进行自动化测试.md","lastUpdated":1746186059000}'),t={name:"main/代码质量/使用 Mocha 进行自动化测试.md"};function e(p,s,h,r,k,E){return n(),a("div",null,s[0]||(s[0]=[l(`<p><strong>当通过手动重新运行来测试代码时，很容易漏掉一些东西。</strong><strong>自动化测试意味着测试是独立于代码的。它们以各种方式运行我们的函数，并将结果与预期结果进行比较。</strong></p><ol><li>行为驱动开发（BDD） <ol><li>BDD 包含了三部分内容：测试、文档和示例。</li></ol></li><li>规范</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;raises to n-th power&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	    assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	});</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> describe：我们正在描述的功能是什么。在我们的例子中我们正在描述函数 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`pow\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">。用于组织“工人（workers）” —— </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`it\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 代码块。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it：里面的描述部分，我们以一种 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">易于理解</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 的方式描述特定的用例，第二个参数是用于对其进行测试的函数。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assert：</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`it\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 块中的代码，如果实现是正确的，它应该在执行的时候不产生任何错误。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	4.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="3"><li>开发流程 <ol><li>编写初始规范，测试最基本的功能。</li><li>创建一个最初始的实现。</li><li>检查它是否工作，我们运行测试框架 <a href="http://mochajs.org/" target="_blank" rel="noreferrer">Mocha</a>（很快会有更多细节）来运行测试。当功能未完成时，将显示错误。我们持续修正直到一切都能工作。</li><li>现在我们有一个带有测试的能工作的初步实现。</li><li>我们增加更多的用例到规范中，或许目前的程序实现还不支持。无法通过测试。</li><li>回到第 3 步，更新程序直到测试不会抛出错误。</li><li>重复第 3 步到第 6 步，直到功能完善。</li></ol></li><li>行为规范 <ol><li><ul><li><a href="http://mochajs.org/" target="_blank" rel="noreferrer">Mocha</a> —— 核心框架：提供了包括通用型测试函数 <code>describe</code> 和 <code>it</code>，以及用于运行测试的主函数。</li></ul></li><li><ul><li><a href="http://chaijs.com/" target="_blank" rel="noreferrer">Chai</a> —— 提供很多断言（assertion）支持的库。它提供了很多不同的断言，现在我们只需要用 <code>assert.equal</code>。</li></ul></li><li><ul><li><a href="http://sinonjs.org/" target="_blank" rel="noreferrer">Sinon</a> —— 用于监视函数、模拟内建函数和其他函数的库，我们在后面才会用到它。</li></ul></li></ol></li><li>初始实现</li><li>改进规范</li><li>一个测试检查一个东西。 <ol><li>有两个相互独立的检查 —— 最好将它拆分成两个更简单的检查。</li></ol></li><li></li></ol>`,4)]))}const c=i(t,[["render",e]]);export{o as __pageData,c as default};
