import{_ as i,c as o,o as t,ae as e}from"./chunks/framework.Dh1jimFm.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-23T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/代码质量/在浏览器中调试.md","filePath":"main/代码质量/在浏览器中调试.md","lastUpdated":1746186059000}'),r={name:"main/代码质量/在浏览器中调试.md"};function n(a,l,s,c,g,_){return t(),o("div",null,l[0]||(l[0]=[e("<ol><li>“资源（Sources）”面板 <ol><li>按住F12打开。</li><li><ol><li><strong>文件导航（File Navigator）</strong> 区域列出了 HTML、JavaScript、CSS 和包括图片在内的其他依附于此页面的文件。Chrome 扩展程序也会显示在这。</li></ol></li><li><strong>代码编辑（Code Editor）</strong> 区域展示源码。</li><li><strong>JavaScript 调试（JavaScript Debugging）</strong> 区域是用于调试的，我们很快就会来探索它。</li></ol></li><li>控制台 <ol><li>可以输入一些命令然后按下 Enter 来执行。</li></ol></li><li>断点（Breakpoints） <ol><li>条件断点，在行号上 <strong>右键单击</strong> 允许你创建一个 <strong>条件</strong> 断点。只有当给定的表达式（你创建条件断点时提供的表达式）为真时才会被触发。</li></ol></li><li>“debugger” 命令</li><li>暂停并查看 <ol><li><strong><code>察看（Watch）</code> —— 显示任意表达式的当前值。</strong></li><li><strong><code>调用栈（Call Stack）</code> —— 显示嵌套的调用链。</strong></li><li><strong><code>作用域（Scope）</code> —— 显示当前的变量。</strong><ol><li><code>Local</code> 显示当前函数中的变量，你还可以在源代码中看到它们的值高亮显示了出来</li><li><code>Global</code> 显示全局变量（不在任何函数中）。</li></ol></li></ol></li><li>跟踪执行 <ol><li>▶—— “恢复（Resume）”：继续执行，快捷键 F8。放行那个符号</li><li>-&gt;· —— “下一步（Step）”：运行下一条（即当前行）指令，快捷键 F9。</li><li>↻  —— “跨步（Step over）”：运行下一条（即当前行）指令，但 <strong>不会进入到一个函数中</strong>，快捷键 F10。</li><li>↓—— “步入（Step into）”，快捷键 F11。</li><li>↑—— “步出（Step out）”：继续执行到当前函数的末尾，快捷键 Shift+F11。</li><li>—— 启用/禁用所有的断点。</li><li>—— 启用/禁用出现错误时自动暂停脚本执行。</li><li>在代码中的某一行上右键，在显示的关联菜单（context menu）中点击一个非常有用的名为 “Continue to here” 的选项。</li></ol></li><li>日志记录 <ol><li>console.log()</li><li></li></ol></li></ol>",1)]))}const S=i(r,[["render",n]]);export{p as __pageData,S as default};
