import{_ as i,c as a,o as l,ae as n}from"./chunks/framework.BtEkjhVd.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"tags":["js"]},"headers":[],"relativePath":"main/09-JS二次深度学习/02-JavaScript基础知识.md","filePath":"main/09-JS二次深度学习/02-JavaScript基础知识.md","lastUpdated":1747318796000}'),e={name:"main/09-JS二次深度学习/02-JavaScript基础知识.md"};function t(p,s,h,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="script标签" tabindex="-1">script标签 <a class="header-anchor" href="#script标签" aria-label="Permalink to &quot;script标签&quot;">​</a></h2><p>将脚本添加到网页上，对于服务器端环境（如 Node.js），你只需要使用诸如 <code>&quot;node my.js&quot;</code> 的命令行来执行它。</p><ol><li>使用 <code>&lt;script&gt;</code> 标签将 JavaScript 程序插入到 HTML 文档的任何位置。</li><li>当浏览器遇到 <code>&lt;script&gt;</code> 标签，代码会自动运行。</li><li>现代的标记（markup） <ol><li>type特性：现在html5已经不在需要</li><li>language特性：默认就是 JavaScript。不再需要使用它了。</li></ol></li><li>外部脚本：js代码过多时，单独放入一个文件，通过src放入html文件。 <ol><li>使用独立文件的好处是浏览器会下载它，然后将它保存到浏览器的 <a href="https://en.wikipedia.org/wiki/Web_cache" target="_blank" rel="noreferrer">缓存</a> 中。</li><li>其他页面想要相同的脚本就会从缓存中获取，而不是下载它。所以文件实际上只会下载一次。这可以节省流量，并使得页面（加载）更快。</li><li>如果设置了 <code>src</code> 特性，<code>script</code> 标签内容将会被忽略。</li></ol></li></ol><h2 id="代码结构" tabindex="-1">代码结构 <a class="header-anchor" href="#代码结构" aria-label="Permalink to &quot;代码结构&quot;">​</a></h2><ol><li>语句：语句是执行行为（action）的语法结构和命令。</li><li>分号：大多数情况下可以省略分号。 将换行符理解成“隐式”的分号。这也被称为 <a href="https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion" target="_blank" rel="noreferrer">自动分号插入</a>。注意也有js引擎识别不到的是否真的需要插入分号的情况</li><li>注释： <ol><li>单行 //</li><li>多行 始 <code>“/*”</code> 并以一个星号和正斜杠结束 <code>“*/”</code>。</li><li>快捷键：单行ctrl+/，多行Ctrl+Shift+/，vscode块级注释  Alt + Shift + A</li><li>注释不支持嵌套</li></ol></li></ol><h2 id="现代模式-use-strict" tabindex="-1">现代模式，‘’use strict&#39;&#39; <a class="header-anchor" href="#现代模式-use-strict" aria-label="Permalink to &quot;现代模式，‘’use strict&#39;&#39;&quot;">​</a></h2><p>需要一个特殊的指令 —— <code>&quot;use strict&quot;</code> 来明确地激活这些新的特性。</p><ol><li>“use strict” <ol><li>当它处于脚本文件的顶部时，则整个脚本文件都将以“现代”模式进行工作。</li><li>只有注释可以出现在 <code>&quot;use strict&quot;</code> 的上面。</li><li>没有类似于 <code>&quot;no use strict&quot;</code> 这样的指令可以使程序返回默认模式。一旦进入了严格模式，就没有回头路了。</li></ol></li><li>浏览器控制台 4. 打开控制台的时候，默认是不启动 <code>use strict</code> 的。 5. 在控制台启用use strict</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;Shift+Enter 换行&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  ...你的代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&lt;按下 Enter 以运行&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//还有一直可靠但不优雅的写法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;use strict&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...你的代码...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="3"><li>我们应该使用 “use strict” 吗？ 现代 JavaScript 支持 “class” 和 “module” —— 高级语言结构，它们会自动启用 <code>use strict</code>。则无需添加 <code>&quot;use strict&quot;</code> 指令。</li></ol><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p><a href="https://en.wikipedia.org/wiki/Variable_(computer_science)" target="_blank" rel="noreferrer">变量</a> 是数据的“命名存储“</p><ol><li>变量 <ol><li>关键字let去声明或定义一个变量，然后给变量赋值，这个值已经保存到与该变量相关联的内存区域了，我们可以通过使用该变量名称访问它</li><li>一个变量应该只被声明一次。</li><li>禁止更改变量值的 <a href="https://en.wikipedia.org/wiki/Functional_programming" target="_blank" rel="noreferrer">函数式</a> 编程语言。比如 <a href="http://www.scala-lang.org/" target="_blank" rel="noreferrer">Scala</a> 或 <a href="http://www.erlang.org/" target="_blank" rel="noreferrer">Erlang</a>。值存在变量理，就永远存在，如果要保存其他值，它会相纸开一个新的变量，无法重用之前的变量</li></ol></li><li>变量命名 4. 变量名称必须仅包含字母、数字、符号 <code>$</code> 和 <code>_</code>。 5. 首字符必须非数字。 6. 命名包括多个单词，通常采用驼峰式命名法（<a href="https://en.wikipedia.org/wiki/CamelCase" target="_blank" rel="noreferrer">camelCase</a>） 7. 会区分大小写：命名为 <code>apple</code> 和 <code>APPLE</code> 的变量是不同的两个变量。 8. 保留字：有一张 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords" target="_blank" rel="noreferrer">保留字列表</a>，这张表中的保留字无法用作变量命名，因为它们被用于编程语言本身了。</li><li>常量 <ol><li>声明一个常数（不变）变量，可以使用 <code>const</code> 而非 <code>let</code></li><li>使用 <code>const</code> 声明的变量称为“常量”。它们不能被修改，如果你尝试修改就会发现报错</li><li>使用大写字母和下划线来命名这些常量。</li><li>有些常量是固定已知的，有些常量是在执行时初始赋值之后就不会改变</li></ol></li><li>正确命名变量 <ol><li>简单易读的变量名，能明确知道变量的作用是什么，</li></ol></li></ol><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>JS的8中基本数据类型（7个原始数据类型和一个引用类型） 我们可以将任何类型的值存入变量。例如，一个变量可以在前一刻是个字符串，下一刻就存储一个数字</p><ol><li>Number类型 <ol><li>整数和浮点数，还有特殊数值：<code>Infinity</code>（无穷大）、<code>-Infinity</code> 和 <code>NaN</code>（计算错误，。任何对 <code>NaN</code> 的进一步数学运算都会返回 <code>NaN</code>，只有一个例外：<code>NaN ** 0</code> 结果为 <code>1</code>）。</li></ol></li><li>BigInt类型 2. “number” 类型无法安全地表示大于 <code>(253-1)</code>（即 <code>9007199254740991</code>），或小于 <code>-(253-1)</code> 的整数。 3. 表示任意长度的整数，可以用于密码学或微秒精度的时间戳。 4. 可以通过将 <code>n</code> 附加到整数字段的末尾来创建 <code>BigInt</code> 值。</li><li>String类型 <ol><li>必须在引号里</li><li><ol><li>双引号：<code>&quot;Hello&quot;</code>.</li></ol></li><li>单引号：<code>&#39;Hello&#39;</code>.</li><li>反引号：<code>\`Hello\`</code>. <code>\${……}</code></li><li>只有一种 <code>string</code> 类型，一个字符串可以包含零个（为空）、一个或多个字符。，没有char</li></ol></li><li>Boolean类型 6. boolean 类型仅包含两个值：<code>true</code> 和 <code>false</code>。</li><li>null值 <ol><li>特殊的 <code>null</code> 值不属于上述任何一种类型。它构成了一个独立的类型，只包含 <code>null</code> 值。</li><li>JavaScript 中的 <code>null</code> 仅仅是一个代表“无”、“空”或“值未知”的特殊值。</li></ol></li><li>undefined值 <ol><li><code>undefined</code> 的含义是 <code>未被赋值</code>。如果一个变量已被声明，但未被赋值，那么它的值就是 <code>undefined</code>。</li></ol></li><li>Object类型 <ol><li><code>object</code> 则用于储存数据集合和更复杂的实体。</li></ol></li><li>Symbol类型 2. <code>symbol</code> 类型用于创建对象的唯一标识符。我们在这里提到 <code>symbol</code> 类型是为了完整性</li><li>typeof 运算符 <ol><li>速进行数据类型检验时，非常有用。<code>typeof</code> 运算符返回参数的类型。</li><li><code>typeof(x)</code>与 <code>typeof x</code> 相同。</li></ol></li></ol><h2 id="交互-alert、prompt-和-confirm" tabindex="-1">交互：alert、prompt 和 confirm <a class="header-anchor" href="#交互-alert、prompt-和-confirm" aria-label="Permalink to &quot;交互：alert、prompt 和 confirm&quot;">​</a></h2><ol><li>alert： 弹出的这个带有信息的小窗口被称为 <strong>模态窗</strong></li><li>prompt：</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title, [default])；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><pre><code>1. 接收两个参数：title显示给用户的文本，default指定 input 框的初始值。
2. 方括号表示该参数是可选的，不是必需的。
3. 如果用户取消了输入，则返回 null。
4. 在IE中我们不提供值，IE会将undefined插入prompt
</code></pre><ol start="3"><li>confirm</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(question);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><pre><code>1. 一个带有 \`question\` 以及确定和取消两个按钮的模态窗口。
2. 返回true或者false
</code></pre><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><p>大多数情况下，运算符和函数会自动将赋予它们的值转换为正确的类型。例如：<code>alert</code> 会自动将任何值都转换为字符串以进行显示。算术运算符会将值转换为数字。</p><ol><li>字符串转换 <ol><li><code>String(value)</code> 来将 <code>value</code> 转换为字符串类型</li></ol></li><li>数字类型转换 <ol><li>在算术函数或者表达式中，会自动number类型转换，例如：除法”/&quot;</li><li><code>Number(value)</code> 显式地将这个 <code>value</code> 转换为 number 类型。</li><li>如果非数字类型不是一个有效数字，转换的结果是NaN</li><li>number类型转换规则</li></ol></li></ol><table tabindex="0"><thead><tr><th>值</th><th>变成……</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>0</td></tr><tr><td>true和false</td><td>1和0</td></tr><tr><td>String</td><td>去掉首尾空白字符（空格、换行符 \\n、制表符 \\t 等）后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 0。否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 NaN。</td></tr></tbody></table><ol start="3"><li>布尔类型转换 <ol><li>在逻辑运算，或者通过调用 Boolean(value) 显式地进行转换。</li><li><ul><li>直观上为“空”的值（如 <code>0</code>、空字符串、<code>null</code>、<code>undefined</code> 和 <code>NaN</code>）将变为 <code>false</code>。</li></ul></li><li><ul><li>其他值变成 <code>true</code>。</li></ul></li><li>包含 0 的字符串 <code>&quot;0&quot;</code> 是 <code>true</code></li></ol></li></ol><h2 id="基础运算符-数学运算" tabindex="-1">基础运算符，数学运算 <a class="header-anchor" href="#基础运算符-数学运算" aria-label="Permalink to &quot;基础运算符，数学运算&quot;">​</a></h2><ol><li><p>一元运算符，二元运算符，运算元</p><ol><li>运算元：运算符应用的对象，比如说乘法运算 <code>5 * 2</code>，有两个运算元：左运算元 <code>5</code> 和右运算元 <code>2</code>。有时候人们也称其为“参数”而不是“运算元”。</li><li>一元运算符：一个运算符对应的只有一个运算元，比如负号</li><li>一个运算符拥有两个运算元，比如减号</li></ol></li><li><p>数学运算</p><ol><li>支持加减乘除，取余，求幂</li><li>取余：%</li><li>求幂：**，例如：<code>a ** b</code> 将 <code>a</code> 提升至 <code>a</code> 的 <code>b</code> 次幂，其表示为 ab</li></ol></li><li><p>用二元运算符 + 连接字符串</p><ol><li>如果加号 <code>+</code> 被应用于字符串，它将合并（连接）各个字符串，只要任意一个运算元是字符串，那么另一个运算元也将被转化为字符串。</li><li>二元 <code>+</code> 是唯一一个以这种方式支持字符串的运算符。其他算术运算符会将其转换成数字运算</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;12&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;21&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;41&quot;，不是 &quot;221&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;122&quot;，不是 &quot;14&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="4"><li><p>数字转化，一元运算符 +</p><ol><li>加号 <code>+</code> 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 <code>+</code> 则会将其转化为数字。</li><li>效果和 <code>Number(...)</code> 相同，但是更加简短。</li></ol></li><li><p>运算符优先级 ……&gt;一元加号（+），一元负号（-）&gt;求幂（<code>**</code>）&gt;乘号（<code>*</code>），除号（/）&gt;加号（+），减号（-）&gt;……&gt;赋值符（=）&gt;……</p></li><li><p>赋值运算符 =，优先级较低</p><ol><li>链式赋值（Chaining assignments） 例如：<code>let</code> a<code>,</code> b<code>,</code> c<code>;</code><em>a <code>=</code> b <code>=</code> c <code>=</code> <code>2</code> <code>+</code> <code>2\`\`;</code></em> a=4，b=4，c=4</li></ol></li><li><p>原地修改</p></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在 n = 7（等同于 n = n + 5）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在 n = 14（等同于 n = n * 2）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( n ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 14</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="7"><li>自增/自减 <ol><li>counter++ 相当于 counter = counter + 1</li><li>counter-- 相当于 counter = counter - 1</li><li>自增/自减只能应用于变量。试一下，将其应用于数值（比如 <code>5++</code>）则会报错。</li><li>运算符 <code>++</code> 和 <code>--</code> 可以置于变量前，也可以置于变量后。但是是有区别的 <ol><li><code>++</code>counter //2 立刻使用自增后的值</li><li>counter<code>++</code> //1 使用其自增之前的值</li></ol></li><li><code>++/--</code> 运算符同样可以在表达式内部使用。它们的优先级比绝大部分的算数运算符要高。</li></ol></li><li>位运算符 <ol><li>位运算符把运算元当做 32 位整数，并在它们的二进制表现形式上操作。</li><li>按位与 &amp;、按位或 | 、按位异或 ^ 、按位非 ~ 、左移&lt;&lt; 、右移 &gt;&gt; 、无符号右移 &gt;&gt;&gt;</li></ol></li><li>逗号运算符 <ol><li>let a = (1 + 2, 3 + 4); //结果为7 这里，第一个表达式 <code>1 + 2</code> 运行了，但是它的结果被丢弃了。随后计算 <code>3 + 4</code>，并且该计算结果被返回。</li><li>请注意逗号运算符的优先级非常低，比 <code>=</code> 还要低，因此上面你的例子中圆括号非常重要，如果没有圆括号：<code>a = 1 + 2, 3 + 4</code> 会先执行 <code>+</code>，将数值相加得到 <code>a = 3, 7</code>，然后赋值运算符 <code>=</code> 执行 <code>a = 3</code>，然后逗号之后的数值 <code>7</code> 不会再执行，它被忽略掉了。相当于 <code>(a = 1 + 2), 3 + 4</code>。</li></ol></li></ol><h2 id="值的比较" tabindex="-1">值的比较 <a class="header-anchor" href="#值的比较" aria-label="Permalink to &quot;值的比较&quot;">​</a></h2><ol><li>值的比较 <ol><li>大于 / 小于：<code>a &gt; b</code>，<code>a &lt; b</code>。</li><li>大于等于 / 小于等于：<code>a &gt;= b</code>，<code>a &lt;= b</code>。</li><li>检查两个值的相等：<code>a == b</code>，请注意双等号 <code>==</code> 表示相等性检查，而单等号 <code>a = b</code> 表示赋值。</li><li>检查两个值不相等：不相等在数学中的符号是 <code>≠</code>，但在 JavaScript 中写成 <code>a != b</code>。</li></ol></li><li>比较结果为 Boolean 类型 <ol><li>true 或者 false</li></ol></li><li>字符串比较，字符串是根据Unicode 编码顺序按字符（母）逐个进行比较的。 <ol><li>alert( &#39;Z&#39; &gt; &#39;A&#39; ); // true</li><li>alert( &#39;Glow&#39; &gt; &#39;Glee&#39; ); // true</li><li>alert( &#39;Bee&#39; &gt; &#39;Be&#39; ); // true</li></ol></li><li>不同类型间的比较 <ol><li>当对不同类型的值进行比较时，JavaScript 会首先将其转化为数字（number）再判定大小。</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true，字符串 &#39;2&#39; 会被转化为数字 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;01&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true，字符串 &#39;01&#39; 会被转化为数字 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true!</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5. 严格相等</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	1. \`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`，区分不出0和false，也无法区分空字符串和 \`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	2. 相等判断符号 \`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\` 两侧的值会先被转化为数字，</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	3. 严格相等运算符 \`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`，在进行比较的时候不会做任何类型转换</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">6. 对 null 和 undefined 进行比较</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	1. \`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\` 和 \`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\` 在相等性检查 \`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\` 中不会进行任何的类型转换，它们有自己独立的比较规则，除了它们之间互等外，不会等于任何其他的值。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	2. alert( null === undefined ); // false</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	3. alert( null == undefined ); // true</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	4. null vs 0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		1. alert( null &gt; 0 );  //  false</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		2. alert( null == 0 ); // false</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		3. alert( null &gt;= 0 ); //  true</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	5. 特立独行的 undefined</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false (2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false (3)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">和</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) 都返回 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 是因为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在比较中被转换为了 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，而 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 是一个特殊的数值型值，它与任何值进行比较都会返回 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) 返回 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 是因为这是一个相等性检查，而 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 只与 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 相等，不会与其他值相等。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><ol start="7"><li>避免问题 <ol><li>对于取值可能是 <code>null/undefined</code> 的变量，请按需要分别检查它的取值情况。</li><li>在使用 <code>&gt;</code> 或 <code>&lt;</code> 进行比较时，需要注意变量可能为 <code>null/undefined</code> 的情况。比较好的方法是单独检查变量是否等于 <code>null/undefined</code>。</li><li>只有<strong>不同类型</strong>的值在比较时才会转换成数字，同类型如字符串的比较规则是逐一字符比较。</li></ol></li></ol><h2 id="条件分支-if-和" tabindex="-1">条件分支：if 和 ？ <a class="header-anchor" href="#条件分支-if-和" aria-label="Permalink to &quot;条件分支：if 和 ？&quot;">​</a></h2><ol><li>“if” 语句 <ol><li>if(...) 语句计算括号里的条件表达式，如果计算结果是 true，就会执行对应的代码块。</li><li>使用 if 语句都用大括号 <code>{}</code> 来包装代码块，即使只有一条语句。这样可以提高代码可读性。</li></ol></li><li>布尔转换 <ol><li>if (…) 语句会计算圆括号内的表达式，并将计算结果转换为布尔型。 <ol><li>数字 <code>0</code>、空字符串 <code>&quot;&quot;</code>、<code>null</code>、<code>undefined</code> 和 <code>NaN</code> 都会被转换成 <code>false</code>。因为它们被称为“假值（falsy）</li><li>其他值被转换为 <code>true</code>，所以它们被称为“真值（truthy）</li></ol></li></ol></li><li><code>else</code>语句 <ol><li>如果判断条件不成立，就会执行它内部的代码。</li></ol></li><li>多个条件：“else if”</li><li>条件运算符 ‘?’ <ol><li>有时它被称为三元运算符</li><li>let result = condition ? value1 : value2;</li><li>问号运算符的优先级较低]</li></ol></li><li>多个“？” <ol><li>使用一系列问号 ? 运算符可以返回一个取决于多个条件的值。</li></ol></li></ol><h2 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h2><p>JavaScript 中有四个逻辑运算符：<code>||</code>（或），<code>&amp;&amp;</code>（与），<code>!</code>（非），<code>??</code>（空值合并运算符）</p><ol><li>||（或） <ol><li>如果参与运算的任意一个参数为 <code>true</code>，返回的结果就为 <code>true</code>，否则返回 <code>false</code></li><li>从左到右依次计算操作数。</li><li>处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>true</code>，就停止计算，返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过（也就是，转换结果都是 <code>false</code>），则返回最后一个操作数。</li><li>一些用法 <ol><li>获取变量列表或者表达式中的第一个真值。</li><li>短路求值（Short-circuit evaluation）。</li></ol></li></ol></li><li>&amp;&amp;（与） <ol><li>当两个操作数都是真值时，与运算返回 <code>true</code>，否则返回 <code>false</code></li></ol></li><li>与运算寻找第一个假值 <ol><li><ul><li>从左到右依次计算操作数。</li></ul></li><li>在处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>false</code>，就停止计算，并返回这个操作数的初始值。</li><li><ul><li>如果所有的操作数都被计算过（例如都是真值），则返回最后一个操作数。</li></ul></li></ol></li><li>与运算 <code>&amp;&amp;</code> 的优先级比或运算 <code>||</code> 要高。</li><li>不要用 <code>||</code> 或 <code>&amp;&amp;</code> 来取代 <code>if</code></li><li>!（非） <ol><li><ol><li>将操作数转化为布尔类型：<code>true/false</code>。返回相反的值。</li></ol></li><li>非运算符 <code>!</code> 的优先级在所有逻辑运算符里面最高，所以它总是在 <code>&amp;&amp;</code> 和 <code>||</code> 之前执行。</li></ol></li></ol><h2 id="空值合并运算符" tabindex="-1">空值合并运算符“？？” <a class="header-anchor" href="#空值合并运算符" aria-label="Permalink to &quot;空值合并运算符“？？”&quot;">​</a></h2><p>空值合并运算符（nullish coalescing operator）的写法为两个问号 <code>??</code>。 <code>a ?? b</code> 的结果是：如果 <code>a</code> 是已定义的，则结果为a，如果 <code>a</code> 不是已定义的，则结果为 <code>b</code> 如果第一个参数不是 <code>null/undefined</code>，则 <code>??</code> 返回第一个参数。否则，返回第二个参数。</p><ol><li>一系列的值中选择出第一个非 <code>null/undefined</code> 的值。</li><li>与 || 比较 <ol><li><ul><li><code>||</code> 返回第一个 <strong>真</strong> 值。</li></ul></li><li><ul><li><code>??</code> 返回第一个 <strong>已定义的</strong> 值。</li></ul></li><li><code>||</code> 无法区分 <code>false</code>、<code>0</code>、空字符串 <code>&quot;&quot;</code> 和 <code>null/undefined</code>。它们都一样 —— 假值（falsy values）</li></ol></li><li>优先级 <ol><li><code>??</code> 运算符的优先级与 <code>||</code> 相同，它们的优先级都为 <code>3</code>，详见：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table" target="_blank" rel="noreferrer">MDN</a>。</li></ol></li><li>?? 与 &amp;&amp; 或 || 一起使用 <ol><li>JavaScript 禁止将 <code>??</code> 运算符与 <code>&amp;&amp;</code> 和 <code>||</code> 运算符一起使用，除非使用括号明确指定了优先级。</li></ol></li></ol><h2 id="循环-while-和-for" tabindex="-1">循环：while 和 for <a class="header-anchor" href="#循环-while-和-for" aria-label="Permalink to &quot;循环：while 和 for&quot;">​</a></h2><p><strong>循环</strong> 是一种重复运行同一代码的方法。</p><ol><li>“while” 循环</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 依次显示 0、1 和 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( i );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	  i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	当 condition 为真时，执行循环体的 code。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	循环体的单次执行叫作 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">一次迭代</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	如果循环体只有一条语句，则可以省略大括号 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`{…}\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li>“do…while” 循环 <ol><li>循环首先执行循环体，然后检查条件，当条件为真时，重复执行循环体。</li><li>不管条件是否为真，循环体 <strong>至少执行一次</strong></li></ol></li><li>“for” 循环 <ol><li><code>begin</code> 执行一次，然后进行迭代：每次检查 <code>condition</code> 后，执行 <code>body</code> 和 <code>step</code>。</li><li><code>for</code> 循环的任何语句段都可以被省略。</li></ol></li><li>跳出循环 <ol><li>随时都可以使用 <code>break</code> 指令强制退出。</li></ol></li><li>继续下一次迭代 <ol><li><code>continue</code> 指令是 <code>break</code> 的“轻量版”。它不会停掉整个循环。而是停止当前这一次迭代，并强制启动新一轮循环（如果条件允许的话）。</li></ol></li><li>禁止 <code>break/continue</code> 在 ‘?’ 的右边 <ol><li>非表达式的语法结构不能与三元运算符 <code>?</code> 一起使用。特别是 <code>break/continue</code> 这样的指令是不允许这样使用的。</li><li><code>(</code>i <code>&gt;</code> <code>5\`\`)</code> <code>?</code> <code>alert\`\`(</code>i<code>)</code> <code>:</code> <code>_continue_\`\`;</code> <code>// continue 不允许在这个位置</code></li></ol></li><li>break/continue 标签</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	labelName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Value at coords (\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">},\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">})\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 如果是空字符串或被取消，则中断并跳出这两个循环。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">break</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (*)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 用得到的值做些事……</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Done!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><pre><code>1. 标签不允许我们跳到代码的任意位置。
2. \`break\` 指令必须在代码块内。
3. \`continue\` 只有在循环内部才可行。
</code></pre><h2 id="switch-语句" tabindex="-1">switch 语句 <a class="header-anchor" href="#switch-语句" aria-label="Permalink to &quot;switch 语句&quot;">​</a></h2><p><code>switch</code> 语句为多分支选择的情况提供了一个更具描述性的方式。</p><ol><li>语法 <ol><li><code>switch</code> 语句有至少一个 <code>case</code> 代码块和一个可选的 <code>default</code> 代码块</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;value1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// if (x === &#39;value1&#39;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	    [break]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;value2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// if (x === &#39;value2&#39;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	    [break]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	    [break]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">如果没有 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，程序将不经过任何检查就会继续执行下一个 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><pre><code>1. 任何表达式都可以成为 \`switch/case\` 的参数
</code></pre><ol start="2"><li>类型很关键 <ol><li>被比较的值必须是相同的类型才能进行匹配。</li></ol></li></ol><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><ol><li>函数声明</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> showMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello everyone!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>局部变量 <ol><li>在函数中声明的变量只在该函数内部可见。</li></ol></li><li>外部变量 <ol><li>函数也可以访问外部变量</li><li>如果在函数内部声明了同名变量，那么函数会 遮蔽 外部变量</li></ol></li><li>全局变量 <ol><li>任何函数之外声明的变量</li><li>减少全局变量的使用</li></ol></li><li>参数 <ol><li>我们可以通过参数将任意数据传递给函数。</li></ol></li><li>默认值 <ol><li>如果一个函数被调用，但有参数（argument）未被提供，那么相应的值就会变成 <code>undefined</code>。</li><li>默认参数的计算 <ol><li>在传入参数的时候没有给值，就会调用方法的默认参数。如果传入了值，就不会调用默认值的计算</li><li>显式地检查 <code>undefined</code></li></ol></li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> showMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	    text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no text given&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( from </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//或者用||运算符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> showMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	  // 如果 text 的值为假值，则分配默认值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	  // 这样赋值 text == &quot;&quot; 与 text 无值相同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	  text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;no text given&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="7"><li>JavaScript 引擎支持 [空值合并运算符] <code>??</code>，它在大多数假值（例如 <code>0</code>）应该被视为“正常值”时更具优势， <ol><li>alert(count ?? &quot;unknown&quot;);</li></ol></li><li>返回值 <ol><li>函数可以将一个值返回到调用代码中作为结果。</li><li>只使用 <code>return</code> 但没有返回值也是可行的。但这会导致函数立即退出。</li><li>空值的 <code>return</code> 或没有 <code>return</code> 的函数返回值为 <code>undefined</code></li><li>空值的 <code>return</code> 和 <code>return undefined</code> 等效</li><li>不要在 <code>return</code> 与返回值之间添加新行，return不换行</li></ol></li><li>函数命名 <ol><li>简短且尽可能准确地描述函数的作用</li></ol></li><li>函数 == 注释 <ol><li>函数应该简短且只有一个功能</li></ol></li></ol><h2 id="函数表达式" tabindex="-1">函数表达式 <a class="header-anchor" href="#函数表达式" aria-label="Permalink to &quot;函数表达式&quot;">​</a></h2><p>在 JavaScript 中，函数不是“神奇的语言结构”，而是一种特殊的值。</p><ol><li>函数声明： <ol><li><code>function</code> 关键字后面没有函数名。函数表达式允许省略函数名。</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayHi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>函数表达式：</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayHi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li>函数是一个值 <ol><li>无论函数是如何创建的，函数都是一个值。</li><li>函数可以复制</li><li>一个函数a，现在let b = a，这是函数复制，let b = a ( )，这是把a函数的值复制给了b，而不是复制函数a</li><li>函数表达式末尾有分号，函数声明没有。是因为函数表达式是赋值语句</li></ol></li><li>回调函数</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">question</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">yes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">no</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(question)) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> no</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> showOk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You agreed.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> showCancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You canceled the execution.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 用法：函数 showOk 和 showCancel 被作为参数传入到 ask</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Do you agree?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, showOk, showCancel);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ask 的两个参数值 showOk 和 showCancel 可以被称为 回调函数 或简称 回调。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">更简洁的写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">question</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">yes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">no</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(question)) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> no</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	ask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	  &quot;Do you agree?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You agreed.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); },</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You canceled the execution.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//这两个函数没有名字，所以叫 匿名函数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><pre><code>1. 一个函数是表示一个“行为”的值
</code></pre><ol start="5"><li>一个函数是表示一个“行为”的值 <ol><li><strong>函数声明</strong>：在主代码流中声明为单独的语句的函数</li><li><strong>函数表达式</strong>：在一个表达式中或另一个语法结构中创建的函数。下面这个函数是在赋值表达式 <code>=</code> 右侧创建的</li><li><strong>函数表达式是在代码执行到达时被创建，并且仅从那一刻起可用。</strong></li><li><strong>在函数声明被定义之前，它就可以被调用。</strong>，在初始化的时候就会被创建</li><li>函数声明的另外一个特殊的功能是它们的块级作用域。</li><li><strong>严格模式下，当一个函数声明在一个代码块内时，它在该代码块内的任何位置都是可见的。但在代码块外不可见。</strong></li><li>什么时候选择函数声明与函数表达式？首先考虑函数声明语法</li><li>最好使用函数声明，因为函数在被声明之前也是可见的。这使我们在代码组织方面更具灵活性，通常也会使得代码可读性更高。</li></ol></li></ol><h2 id="箭头函数-基础知识" tabindex="-1">箭头函数，基础知识 <a class="header-anchor" href="#箭头函数-基础知识" aria-label="Permalink to &quot;箭头函数，基础知识&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">如果没有参数，括号则是空的（但括号必须保留）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayHi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 花括号表示开始一个多行函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果我们使用了花括号，那么我们需要一个显式的 “return”</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="javascript-特性" tabindex="-1">JavaScript 特性 <a class="header-anchor" href="#javascript-特性" aria-label="Permalink to &quot;JavaScript 特性&quot;">​</a></h2><ol><li>代码结构 <ol><li>分号分隔，或者换行也默认视为分隔符</li></ol></li><li>严格模式 <ol><li>应该在脚本顶部写上 <code>&quot;use strict&quot;</code> 指</li></ol></li><li>变量 <ol><li>let：</li><li>const （不变的，不能被改变）</li><li><ul><li><code>var</code>（旧式的）</li></ul></li></ol></li><li>交互-<strong>模态框</strong><ol><li>prompt(question[, default])，提出一个问题 question，并返回访问者输入的内容，如果他按下「取消」则返回 null。</li><li>confirm(question)</li><li>alert(message)</li></ol></li><li>运算符 <ol><li>常规的：<code>+ - * /</code>（加减乘除），取余运算符 <code>%</code> 和幂运算符 <code>**</code>。</li><li>赋值 =</li><li>按位运算符</li><li>三元运算符</li><li>逻辑运算符 || &amp;&amp;</li><li>空值合并运算符 ??</li><li>比较运算符 == ，除了 <code>null</code> 和 <code>undefined</code>，它们彼此相等而没有其他情况</li><li><code> ===</code>，严格相等运算符，不同的类型总是指不同的值。值 <code>null</code> 和 <code>undefined</code> 是特殊的：它们只在 <code>==</code> 下相等，且不相等于其他任何值。</li></ol></li><li>循环</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="7"><li>“switch” 结构 <ol><li>它内部使用 <code>===</code>（严格相等）进行比较。</li></ol></li><li>函数 <ol><li>函数声明</li><li>函数表达式 ，赋值</li><li>箭头函数</li></ol></li></ol>`,81)]))}const E=i(e,[["render",t]]);export{c as __pageData,E as default};
