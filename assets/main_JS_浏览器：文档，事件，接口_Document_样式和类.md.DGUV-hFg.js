import{_ as o,c as l,o as t,ae as d}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-29T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/JS/浏览器：文档，事件，接口/Document/样式和类.md","filePath":"main/JS/浏览器：文档，事件，接口/Document/样式和类.md","lastUpdated":1746068392000}'),c={name:"main/JS/浏览器：文档，事件，接口/Document/样式和类.md"};function i(s,e,a,r,n,m){return t(),l("div",null,e[0]||(e[0]=[d("<p>通常有两种设置元素样式的方式： 1. 在 CSS 中创建一个类，并添加它：<code>&lt;div class=&quot;...&quot;&gt;</code> 2. 将属性直接写入 <code>style</code>：<code>&lt;div style=&quot;...&quot;&gt;</code>。</p><ol><li><strong>className 和 classList</strong><ol><li>更改类是脚本中最常见的操作之一。</li><li><code>&quot;className&quot;</code>：<code>elem.className</code> 对应于 <code>&quot;class&quot;</code> 特性（attribute）。</li><li><code>elem.classList</code> 是一个特殊的对象，它具有 <code>add/remove/toggle</code> 单个类的方法。</li><li><code>classList</code> 的方法 <ul><li><code>elem.classList.add/remove(class)</code> —— 添加/移除类。</li><li><code>elem.classList.toggle(class)</code> —— 如果类不存在就添加类，存在就移除它。</li><li><code>elem.classList.contains(class)</code> —— 检查给定类，返回 <code>true/false</code>。</li></ul></li></ol></li><li><strong>元素样式</strong><ol><li><code>elem.style</code> 属性是一个对象，它对应于 <code>&quot;style&quot;</code> 特性（attribute）中所写的内容。<code>elem.style.width=&quot;100px&quot;</code> 的效果等价于我们在 <code>style</code> 特性中有一个 <code>width:100px</code> 字符串。</li></ol></li><li><strong>重置样式属性</strong><ol><li>有时我们想要分配一个样式属性，稍后移除它。</li><li>这里不应该使用 <code>delete elem.style.display</code>，而应该使用 <code>elem.style.display = &quot;&quot;</code> 将其赋值为空。</li><li>用 <code>style.cssText</code> 进行完全的重写 <ol><li>我们使用 <code>style.*</code> 来对各个样式属性进行赋值。我们不能像这样的 <code>div.style=&quot;color: red; width: 100px&quot;</code> 设置完整的属性，因为 <code>div.style</code> 是一个对象，并且它是只读的。</li></ol></li></ol></li><li><strong>注意单位</strong><ol><li>px，rem，vh等</li></ol></li><li><strong>计算样式：getComputedStyle</strong><ol><li><strong><code>style</code> 属性仅对 <code>&quot;style&quot;</code> 特性（attribute）值起作用，而没有任何 CSS 级联（cascade）。</strong></li><li><strong>element</strong><ol><li>需要被读取样式值的元素。</li></ol></li><li><strong>pseudo</strong><ol><li>伪元素（如果需要），例如 <code>::before</code>。空字符串或无参数则意味着元素本身。</li></ol></li><li>计算值和解析值 <ol><li><strong>计算 (computed)</strong> 样式值是所有 CSS 规则和 CSS 继承都应用后的值，这是 CSS 级联（cascade）的结果。它看起来像 <code>height:1em</code> 或 <code>font-size:125%</code>。</li><li><strong>解析 (resolved)</strong> 样式值是最终应用于元素的样式值。诸如 <code>1em</code> 或 <code>125%</code> 这样的值是相对的。浏览器将使用计算（computed）值，并使所有单位均为固定的，且为绝对单位，例如：<code>height:20px</code> 或 <code>font-size:16px</code>。对于几何属性，解析（resolved）值可能具有浮点，例如：<code>width:50.5px</code>。</li></ol></li><li><code>getComputedStyle</code> 需要完整的属性名 <ol><li>要的确切的属性，例如 <code>paddingLeft</code>、<code>marginTop</code> 或 <code>borderTopWidth</code>。否则，就不能保证正确的结果。</li></ol></li><li>应用于 <code>:visited</code> 链接的样式被隐藏了！ <ol><li>可以使用 CSS 伪类 <code>:visited</code> 对被访问过的链接进行着色。</li><li>但 <code>getComputedStyle</code> 没有给出访问该颜色的方式，因为如果允许的话，任意页面都可以通过在页面上创建它，并通过检查样式来确定用户是否访问了某链接。</li><li>JavaScript 看不到 <code>:visited</code> 所应用的样式。</li></ol></li></ol></li></ol>",2)]))}const p=o(c,[["render",i]]);export{g as __pageData,p as default};
