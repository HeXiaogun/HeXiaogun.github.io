import{_ as o,c as e,o as t,ae as i}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-25T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/函数进阶内容/“new Function”语法.md","filePath":"main/函数进阶内容/“new Function”语法.md","lastUpdated":1746186059000}'),l={name:"main/函数进阶内容/“new Function”语法.md"};function a(c,n,r,s,_,d){return t(),e("div",null,n[0]||(n[0]=[i("<ol><li><strong>语法</strong><ol><li>let func = new Function ([arg1, arg2, ...argN], functionBody);</li><li>使用 <code>new Function</code> 创建函数的应用场景非常特殊，比如在复杂的 Web 应用程序中，我们需要从服务器获取代码或者动态地从模板编译函数时才会使用。</li><li>使用 <code>new Function</code> 创建一个函数，那么该函数的 <code>[[Environment]]</code> 并不指向当前的词法环境，而是指向全局环境。</li></ol></li><li><strong>闭包</strong><ol><li>闭包是指使用一个特殊的属性 <code>[[Environment]]</code> 来记录函数自身的创建时的环境的函数。</li></ol></li><li><strong>即使我们可以在 <code>new Function</code> 中访问外部词法环境，我们也会受挫于压缩程序。</strong></li><li>在将 JavaScript 发布到生产环境之前，需要使用 <strong>压缩程序（minifier）</strong> 对其进行压缩 —— 一个特殊的程序，通过删除多余的注释和空格等压缩代码 —— 更重要的是，将局部变量命名为较短的变量。</li><li></li></ol>",1)]))}const g=o(l,[["render",a]]);export{u as __pageData,g as default};
