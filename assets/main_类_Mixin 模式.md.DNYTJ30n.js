import{_ as i,c as o,o as t,ae as a}from"./chunks/framework.Dh1jimFm.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-25T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/类/Mixin 模式.md","filePath":"main/类/Mixin 模式.md","lastUpdated":1746186059000}'),n={name:"main/类/Mixin 模式.md"};function d(r,e,l,c,s,_){return t(),o("div",null,e[0]||(e[0]=[a("<p>在 JavaScript 中，我们只能继承单个对象。每个对象只能有一个 <code>[[Prototype]]</code>。并且每个类只可以扩展另外一个类。</p><ol><li><strong>一个 Mixin 实例</strong><ol><li>在 JavaScript 中构造一个 mixin 最简单的方式就是构造一个拥有实用方法的对象，以便我们可以轻松地将这些实用的方法合并到任何类的原型中。</li><li>Mixin 可以在自己内部使用继承。</li></ol></li><li><strong>EventMixin</strong> - Mixin 将提供 <code>.trigger(name, [...data])</code> 方法，以在发生重要的事情时“生成一个事件”。<code>name</code> 参数（arguments）是事件的名称，<code>[...data]</code> 是可选的带有事件数据的其他参数（arguments）。 <ul><li>此外还有 <code>.on(name, handler)</code> 方法，它为具有给定名称的事件添加了 <code>handler</code> 函数作为监听器（listener）。当具有给定 <code>name</code> 的事件触发时将调用该方法，并从 <code>.trigger</code> 调用中获取参数（arguments）。</li><li>……还有 <code>.off(name, handler)</code> 方法，它会删除 <code>handler</code> 监听器（listener）。</li></ul></li><li></li></ol>",2)]))}const g=i(n,[["render",d]]);export{p as __pageData,g as default};
