import{_ as i,c as a,o as l,ae as n}from"./chunks/framework.Dh1jimFm.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-23T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/基础知识/JavaScript 特性.md","filePath":"main/基础知识/JavaScript 特性.md","lastUpdated":1746186059000}'),e={name:"main/基础知识/JavaScript 特性.md"};function p(t,s,h,r,k,d){return l(),a("div",null,s[0]||(s[0]=[n(`<ol><li>代码结构 <ol><li>分号分隔，或者换行也默认视为分隔符</li></ol></li><li>严格模式 <ol><li>应该在脚本顶部写上 <code>&quot;use strict&quot;</code> 指</li></ol></li><li>变量 <ol><li>let：</li><li>const （不变的，不能被改变）</li><li><ul><li><code>var</code>（旧式的）</li></ul></li></ol></li><li>交互-<strong>模态框</strong><ol><li>prompt(question[, default])，提出一个问题 question，并返回访问者输入的内容，如果他按下「取消」则返回 null。</li><li>confirm(question)</li><li>alert(message)</li></ol></li><li>运算符 <ol><li>常规的：<code>+ - * /</code>（加减乘除），取余运算符 <code>%</code> 和幂运算符 <code>**</code>。</li><li>赋值 =</li><li>按位运算符</li><li>三元运算符</li><li>逻辑运算符 || &amp;&amp;</li><li>空值合并运算符 ??</li><li>比较运算符 == ，除了 <code>null</code> 和 <code>undefined</code>，它们彼此相等而没有其他情况</li><li><code> ===</code>，严格相等运算符，不同的类型总是指不同的值。值 <code>null</code> 和 <code>undefined</code> 是特殊的：它们只在 <code>==</code> 下相等，且不相等于其他任何值。</li></ol></li><li>循环</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="7"><li>“switch” 结构 <ol><li>它内部使用 <code>===</code>（严格相等）进行比较。</li></ol></li><li>函数 <ol><li>函数声明</li><li>函数表达式 ，赋值</li><li>箭头函数</li></ol></li></ol>`,3)]))}const E=i(e,[["render",p]]);export{o as __pageData,E as default};
