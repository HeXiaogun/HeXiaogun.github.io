import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"tags":["js"]},"headers":[],"relativePath":"main/09-JS二次深度学习/27-正则表达式.md","filePath":"main/09-JS二次深度学习/27-正则表达式.md","lastUpdated":1747837141000}'),e={name:"main/09-JS二次深度学习/27-正则表达式.md"};function t(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="模式-patterns-和修饰符-flags" tabindex="-1">模式（Patterns）和修饰符（flags） <a class="header-anchor" href="#模式-patterns-和修饰符-flags" aria-label="Permalink to &quot;模式（Patterns）和修饰符（flags）&quot;">​</a></h2><ol><li><strong>正则表达式</strong><ol><li>正则表达式（可叫作 “regexp”，或 “reg”）由 <strong>模式</strong> 和可选的 <strong>修饰符</strong> 组成。</li><li>有两种创建正则表达式对象的语法。</li><li>较长一点的语法：regexp = new RegExp(&quot;pattern&quot;, &quot;flags&quot;);</li><li>较短一点的语法，使用斜线 <code>&quot;/&quot;</code>：</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">pattern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 没有修饰符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">pattern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">gmi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 带有修饰符 g、m 和 i（后面会讲到）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>斜线 <code>/.../</code> 告诉 JavaScript 我们正在创建一个正则表达式。它的作用与字符串的引号作用相同。</li><li><strong>修饰符</strong><ol><li>正则表达式可能有影响搜索结果的修饰符。</li><li>在 JavaScript 中，只有 6 个修饰符： <ol><li><code>i</code>：使用此修饰符后，搜索时不区分大小写：<code>A</code> 和 <code>a</code> 之间没有区别（请参见下面的示例）。</li><li><code>g</code>：使用此修饰符后，搜索时会寻找所有的匹配项 —— 没有它，则仅返回第一个匹配项。</li><li><code>m</code>：多行模式（详见 <a href="https://zh.javascript.info/regexp-multiline-mode" target="_blank" rel="noreferrer">锚点 ^ $ 的多行模式，修饰符 &quot;m&quot;</a>）。</li><li><code>s</code>：启用 “dotall” 模式，允许点 <code>.</code> 匹配换行符 <code>\\n</code>（在 <a href="https://zh.javascript.info/regexp-character-classes" target="_blank" rel="noreferrer">字符类</a> 中有详细介绍）。</li><li><code>u</code>：开启完整的 Unicode 支持。该修饰符能够正确处理代理对。详见 <a href="https://zh.javascript.info/regexp-unicode" target="_blank" rel="noreferrer">Unicode：修饰符 &quot;u&quot; 和类 \\p{...}</a>。</li><li><code>y</code>：粘滞（Sticky）模式，在文本中的确切位置搜索（详见 <a href="https://zh.javascript.info/regexp-sticky" target="_blank" rel="noreferrer">粘性修饰符 &quot;y&quot;，在位置处搜索</a>）</li></ol></li><li><strong>颜色</strong><ol><li>正则表达式 —— <code>red</code></li><li>字符串（我们搜索的地方）—— <code>blue</code></li><li>结果 —— <code>green</code></li></ol></li></ol></li><li><strong>搜索：str.match</strong><ol><li><code>str.match(regexp)</code> 方法在字符串 <code>str</code> 中寻找 <code>regexp</code> 的所有匹配项。</li><li>它有 3 种工作模式： <ol><li>如果正则表达式具有修饰符 <code>g</code>，它返回一个由所有匹配项所构成的数组</li><li>如果没有这样的修饰符，它则会以数组形式返回第一个匹配项，索引 <code>0</code> 处保存着完整的匹配项，返回的结果的属性中还有一些其他详细信息</li><li>最后，如果没有匹配项，则返回 <code>null</code>（无论是否有修饰符 <code>g</code>）。</li></ol></li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;We will, we will rock you&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">we</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">gi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// We,we（由两个匹配的子字符串构成的数组）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//请注意，\`We\` 和 \`we\` 都被找到了，因为修饰符 \`i\` 使得正则表达式在进行搜索时不区分大小写。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;We will, we will rock you&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">we</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 没有修饰符 g</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( result[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] );     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// We（第一个匹配项）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( result.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 详细信息：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( result.index );  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0（匹配项的位置）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( result.input );  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// We will, we will rock you（源字符串）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//如果正则表达式中有一部分内容被包在括号里，那么返回的数组可能会有 \`0\` 以外的索引。我们将在 [捕获组](https://zh.javascript.info/regexp-groups) 中学习这部分相关内容。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matches </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;JavaScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">HTML</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">matches.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No matches&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在可以了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ol start="4"><li><strong>替换：str.replace</strong><ol><li><code>str.replace(regexp, replacement)</code> 方法使用 <code>replacement</code> 替换在字符串 <code>str</code> 中找到的 <code>regexp</code> 的匹配项（如果带有修饰符 <code>g</code> 则替换所有匹配项，否则只替换第一个）。</li></ol></li></ol><table tabindex="0"><thead><tr><th>符号</th><th>在替换字符串中的行为</th></tr></thead><tbody><tr><td>$&amp;</td><td>插入整个匹配项</td></tr><tr><td>$\`</td><td>插入字符串中匹配项之前的字符串部分</td></tr><tr><td>$&#39;</td><td>插入字符串中匹配项之后的字符串部分</td></tr><tr><td>$n</td><td>如果 <code>n</code> 是一个 1-2 位的数字，则插入第 n 个分组的内容，详见 <a href="https://zh.javascript.info/regexp-groups" target="_blank" rel="noreferrer">捕获组</a></td></tr><tr><td><code>$&lt;name&gt;</code></td><td>插入带有给定 <code>name</code> 的括号内的内容，详见 <a href="https://zh.javascript.info/regexp-groups" target="_blank" rel="noreferrer">捕获组</a></td></tr><tr><td>$$</td><td>插入字符 <code>$</code></td></tr></tbody></table><ol start="5"><li><strong>测试：regexp.test</strong><ol><li><code>regexp.test(str)</code> 方法寻找至少一个匹配项，如果找到了，则返回 <code>true</code>，否则返回 <code>false</code></li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;I love JavaScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">LOVE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( regexp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="字符类" tabindex="-1">字符类 <a class="header-anchor" href="#字符类" aria-label="Permalink to &quot;字符类&quot;">​</a></h2><p><strong>字符类（Character classes）</strong> 是一种特殊的符号，匹配特定集合中的任何符号。 让我们探索“数字”类。它写为 <code>\\d</code>，对应于“任何一位数字”。 让我们找到电话号码的第一个数字：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;+7(903)-123-45-67&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果没有修饰符 <code>g</code>，则正则表达式仅查找第一个匹配项，即第一个数字 <code>\\d</code>。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;+7(903)-123-45-67&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配项构成的数组：7,9,0,3,1,2,3,4,5,6,7</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 让我们将其输出为纯数字构成的电话号码：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 79031234567</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这是数字的字符类。还有其他字符类。最常用的是：</p><ul><li><code>\\d</code>：（“d” 来自 “digit”）：数字：从 <code>0</code> 到 <code>9</code> 的字符。</li><li><code>\\s</code>：（“s” 来自 “space”）：空格符号：包括空格，制表符 <code>\\t</code>，换行符 <code>\\n</code> 和其他少数稀有字符，例如 <code>\\v</code>、<code>\\f</code> 和 <code>\\r</code>。</li><li><code>\\w</code>：（“w” 来自 “word”）：“单字”字符：拉丁字母或数字或下划线 <code>_</code>。非拉丁字母（如西里尔字母或印地文）不属于 <code>\\w</code>。</li><li>例如，<code>\\d\\s\\w</code> 表示“数字”，后跟“空格字符”，后跟“单字字符”，例如 <code>1 a</code>。</li></ul><p><strong>正则表达式可能同时包含常规符号和字符类。</strong><code>CSS\\d</code> 匹配 <code>CSS</code> 后面带有一个数字的字符串：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Is there CSS4?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">CSS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CSS4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li><strong>反向类</strong><ol><li>对于每个字符类，都有一个“反向类”，用相同的字母表示，但是大写的。</li><li>“反向”表示它与所有其他字符匹配，例如： <ol><li><code>\\D</code>：非数字：除 <code>\\d</code> 以外的任何字符，例如字母。</li><li><code>\\S</code>：非空格符号：除 <code>\\s</code> 以外的任何字符，例如字母。</li><li><code>\\W</code>：非单字字符：除 <code>\\w</code> 以外的任何字符，例如非拉丁字母或空格。</li></ol></li></ol></li><li><strong>点（.）匹配“任何字符”</strong><ol><li>点 <code>.</code> 是一种特殊字符类，它与“除换行符之外的任何字符”匹配。</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">CS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CSS4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CSS4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CS-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CS-4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CS 4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CS 4（空格也是一个字符）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>点表示“任何字符”，而不是“缺少字符”。必须有一个与之匹配的字符：<div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CS4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">CS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null，没有匹配项，因为这里没有与点匹配的字符</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><strong>带有修饰符 “s” 时点字符类匹配任何字符</strong><ol><li>默认情况下，点与换行符 <code>\\n</code> 不匹配。</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//正则表达式 \`A.B\` 匹配 \`A\`，然后匹配 \`B\` 和它们之间的任何字符，除了换行符\`\\n\`：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">B</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null（无匹配项）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//这就是修饰符 \`s\` 所做的事。如果有一个正则表达式具有该修饰符，那么点 \`.\` 能够匹配任何字符：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">B</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// A\\nB（匹配了！）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="2"><li><strong>IE 浏览器不支持</strong><ol><li>IE 浏览器不支持 <code>s</code> 修饰符。</li><li>幸运的是，有一个替代方案，我们可以使用像 <code>[\\s\\S]</code> 这样的正则表达式来匹配“任何字符”（此模式将在 <a href="https://zh.javascript.info/regexp-character-sets-and-ranges" target="_blank" rel="noreferrer">集合和范围 [...]</a> 中介绍）。</li></ol></li><li><strong>注意空格</strong><ol><li>通常我们很少注意空格。对我们来说，字符串 <code>1-5</code> 和 <code>1 - 5</code> 几乎相同。</li></ol></li><li><strong>一个空格是一个字符。与其他字符同等重要。</strong></li><li>我们无法在正则表达式中添加或删除空格后，还期望它的作用能像之前那样不被改变。</li></ol></li><li><strong>字符类：</strong><ul><li><code>\\d</code> —— 数字。</li><li><code>\\D</code> —— 非数字。</li><li><code>\\s</code> —— 空格符号，制表符，换行符。</li><li><code>\\S</code> —— 除了 <code>\\s</code> 。</li><li><code>\\w</code> —— 拉丁字母，数字，下划线 <code>&#39;_&#39;</code>。</li><li><code>\\W</code> —— 除了 <code>\\w</code>。</li><li><code>.</code> —— 带有修饰符 <code>&#39;s&#39;</code> 时匹配任何字符，否则匹配除换行符 <code>\\n</code> 之外的任何字符。</li></ul></li></ol><h2 id="unicode-修饰符-u-和类-p" tabindex="-1"><strong>Unicode：修饰符 &quot;u&quot; 和类 \\p{...}</strong> <a class="header-anchor" href="#unicode-修饰符-u-和类-p" aria-label="Permalink to &quot;**Unicode：修饰符 &quot;u&quot; 和类 \\p{...}**&quot;">​</a></h2><p>JavaScript 对字符串使用 <a href="https://en.wikipedia.org/wiki/Unicode" target="_blank" rel="noreferrer">Unicode 编码</a>。大多数字符使用 2 个字节编码，但这种方式只能编码最多 65536 个字符。 这个范围不足以对所有可能的字符进行编码，这就是为什么使用 4 个字节对一些罕见的字符进行编码，比如 <code>𝒳</code>（数学符号 X）或 <code>😄</code>（笑脸），一些象形文字等等。</p><table tabindex="0"><thead><tr><th>字符</th><th>Unicode</th><th>Unicode 中的字节数</th></tr></thead><tbody><tr><td>a</td><td>0x0061</td><td>2</td></tr><tr><td>≈</td><td>0x2248</td><td>2</td></tr><tr><td>𝒳</td><td>0x1d4b3</td><td>4</td></tr><tr><td>𝒴</td><td>0x1d4b4</td><td>4</td></tr><tr><td>😄</td><td>0x1f604</td><td>4</td></tr></tbody></table><ol><li><strong>Unicode 属性 \\p{…}</strong><ol><li>Unicode 中的每个字符都有很多属性。它们描述了字符所属的“类别”，包含了关于字符的各种信息。</li><li>以下是主要的字符类别和它们对应的子类别： <ul><li>字母（Letter）<code>L</code>： <ul><li>小写（lowercase）<code>Ll</code>，</li><li>修饰（modifier）<code>Lm</code>，</li><li>首字母大写（titlecase）<code>Lt</code>，</li><li>大写（uppercase）<code>Lu</code>，</li><li>其它（other）<code>Lo</code>。</li></ul></li><li>数字（Number）<code>N</code>： <ul><li>十进制数字（decimal digit）<code>Nd</code>，</li><li>字母数字（letter number）<code>Nl</code>，</li><li>其它（other）<code>No</code>。</li></ul></li><li>标点符号（Punctuation）<code>P</code>： <ul><li>连接符（connector）<code>Pc</code>，</li><li>横杠（dash）<code>Pd</code>，</li><li>起始引号（initial quote）<code>Pi</code>，</li><li>结束引号（final quote）<code>Pf</code>，</li><li>开（open）<code>Ps</code>，</li><li>闭（close）<code>Pe</code>，</li><li>其它（other）<code>Po</code>。</li></ul></li><li>标记（Mark）<code>M</code>（accents etc）： <ul><li>间隔合并（spacing combining）<code>Mc</code>，</li><li>封闭（enclosing）<code>Me</code>，</li><li>非间隔（non-spacing）<code>Mn</code>。</li></ul></li><li>符号（Symbol）<code>S</code>： <ul><li>货币（currency）<code>Sc</code>，</li><li>修饰（modifier）<code>Sk</code>，</li><li>数学（math）<code>Sm</code>，</li><li>其它（other）<code>So</code>。</li></ul></li><li>分隔符（Separator）<code>Z</code>： <ul><li>行（line）<code>Zl</code>，</li><li>段落（paragraph）<code>Zp</code>，</li><li>空格（space）<code>Zs</code>。</li></ul></li><li>其它（Other）<code>C</code>： <ul><li>控制符（control）<code>Cc</code>，</li><li>格式（format）<code>Cf</code>，</li><li>未分配（not assigned）<code>Cn</code>，</li><li>私有（private use）<code>Co</code>，</li><li>代理伪字符（surrogate）<code>Cs</code>。</li></ul></li><li>也有其它派生的类别，例如： <ul><li><ul><li><code>Alphabetic</code>（<code>Alpha</code>），包含了字母 <code>L</code>，加上字母数字 <code>Nl</code>（例如 Ⅻ —— 罗马数字 12），加上一些其它符号 <code>Other_Alphabetic</code>（<code>OAlpha</code>）。</li></ul></li><li><code>Hex_Digit</code> 包括 16 进制数字 <code>0-9</code>，<code>a-f</code>。</li><li>……等等。</li></ul></li><li>Unicode 支持很多不同的属性，列出整个清单需要占用大量的篇幅，因此在这里列出相关的链接： <ul><li>按照属性列出所有的字符：<a href="https://unicode.org/cldr/utility/list-unicodeset.jsp" target="_blank" rel="noreferrer">https://unicode.org/cldr/utility/list-unicodeset.jsp</a>.</li><li>属性的对应缩写形式：<a href="https://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt" target="_blank" rel="noreferrer">https://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt</a>.</li><li>以文本格式整理的所有 Unicode 字符，包含了所有的属性：<a href="https://www.unicode.org/Public/UCD/latest/ucd/" target="_blank" rel="noreferrer">https://www.unicode.org/Public/UCD/latest/ucd/</a>.</li></ul></li></ul></li></ol></li><li><strong>举例：16 进制数字</strong><ol><li>让我们来查找 16 进制数字，写作 <code>xFF</code> 其中 <code>F</code> 是一个 16 进制的数字（0…9 或者 A…F）。</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">x</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\p</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">{Hex_Digit}</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\p</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">{Hex_Digit}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;number: xAF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// xAF</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li><strong>举例：中文字符</strong><ol><li>有一个 Unicode 属性 <code>Script</code>（一个书写系统），这个属性可能有一个值：<code>Cyrillic</code>、<code>Greek</code>、<code>Arabic</code>、<code>Han</code>（中文）等等，<a href="https://en.wikipedia.org/wiki/Script_(Unicode)" target="_blank" rel="noreferrer">这里是一个完整的列表</a>。</li><li>要在给定的书写系统中查找字符，我们需要使用 <code>Script=&lt;value&gt;</code>，例如对于西里尔字母：<code>\\p{sc=Cyrillic}</code>，中文象形文字：<code>\\p{sc=Han}</code>，等等。</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\p</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">{sc=Han}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">gu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回中文象形文字</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Hello Привет 你好 123_456\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 你,好</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><strong>举例：货币</strong><ol><li>表示货币的字符，例如 <code>$</code>、<code>€</code> 和 <code>¥</code>，具有 Unicode 属性 <code>\\p{Currency_Symbol}</code>，缩写为 <code>\\p{Sc}</code>。</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\p</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">{Sc}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">gu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Prices: $2, €1, ¥9\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// $2,€1,¥9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="锚点-字符串开始-和末尾" tabindex="-1"><strong>锚点：字符串开始 ^ 和末尾 $</strong> <a class="header-anchor" href="#锚点-字符串开始-和末尾" aria-label="Permalink to &quot;**锚点：字符串开始 ^ 和末尾 $**&quot;">​</a></h2><p>插入符号 <code>^</code> 和美元符号 <code>$</code> 在正则表达式中具有特殊的含义。它们被称为“锚点”。 插入符号 <code>^</code> 匹配文本开头，而美元符号 <code>$</code> 则匹配文本末尾。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;it&#39;s fleece was white as snow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">snow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str1) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li><strong>测试完全匹配</strong><ol><li>这两个锚点 <code>^...$</code> 放在一起通常被用于测试一个字符串是否完全匹配一个模式。例如，检查用户输入的格式是否正确。</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> goodInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;12:34&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> badInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;12:345&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( regexp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(goodInput) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( regexp.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(badInput) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//在这个例子中 \\d\\d:\\d\\d 所对应的匹配项必须正好在文本 ^ 的开头之后开始，并且结尾 $ 必须紧跟其后。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>锚点“宽度”为零 <ol><li>锚点 <code>^</code> 和 <code>$</code> 属于测试。它们的宽度为零。</li><li>换句话说，它们并不匹配一个具体的字符，而是让正则引擎测试所表示的条件（文本开头/文本末尾）。</li></ol></li></ol></li></ol><h2 id="锚点-的多行模式-修饰符-m" tabindex="-1">锚点 ^ $ 的多行模式，修饰符 &quot;m&quot; <a class="header-anchor" href="#锚点-的多行模式-修饰符-m" aria-label="Permalink to &quot;锚点 ^ $ 的多行模式，修饰符 &quot;m&quot;&quot;">​</a></h2><p>多行模式由修饰符 <code>m</code> 启用。 它只影响 <code>^</code> 和 <code>$</code> 的行为。 在多行模式下，它们不仅仅匹配文本的开始与末尾，还匹配每一行的开始与末尾。</p><ol><li><strong>搜索行的开头 <code>^</code></strong><ol><li>在这个有多行文本的例子中，模式 <code>/^\\d/gm</code> 将从每行的开头取一个数字：</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`1st place: Winnie</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2nd place: Piglet</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3rd place: Eeyore\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">gm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1, 2, 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>没有修饰符 <code>m</code> 时，仅会匹配第一个数字：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`1st place: Winnie</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2nd place: Piglet</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3rd place: Eeyore\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li><strong>搜索行的末尾 <code>$</code></strong><ol><li>美元符 <code>$</code> 的行为也类似。</li><li>正则表达式 <code>\\d$</code> 寻找每行的最后一个数字</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Winnie: 1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Piglet: 2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Eeyore: 3\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">gm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1,2,3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>“行的末尾”表示“就在换行符之前”：多行模式下的测试 <code>$</code> 匹配所有以换行符 <code>\\n</code> 结尾的位置。 3. <strong>搜索 \\n 而不是 ^ $</strong> 1. 要寻找新的一行，我们不仅可以使用锚点 <code>^</code> 和 <code>$</code>，也可以使用换行符 <code>\\n</code>。 2. 在这里我们使用 <code>\\d\\n</code> 进行搜索，而不是使用 <code>\\d$</code>：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Winnie: 1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Piglet: 2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Eeyore: 3\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1\\n,2\\n</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="词边界-b" tabindex="-1"><strong>词边界：\\b</strong> <a class="header-anchor" href="#词边界-b" aria-label="Permalink to &quot;**词边界：\\b**&quot;">​</a></h2><p>词边界 <code>\\b</code> 是一种检查，就像 <code>^</code> 和 <code>$</code> 一样。 有三种不同的位置可作为词边界：</p><ul><li>在字符串开头，如果第一个字符是单词字符 <code>\\w</code>。</li><li>在字符串中的两个字符之间，其中一个是单词字符 <code>\\w</code>，另一个不是。</li><li>在字符串末尾，如果最后一个字符是单词字符 <code>\\w</code>。 例如，可以在 <code>Hello, Java!</code> 中找到 <code>\\bJava\\b</code> 的匹配项，其中 <code>Java</code> 是一个独立的单词，而在 <code>Hello, JavaScript!</code> 中则不行。</li></ul><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Java!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">Java</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Java</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, JavaScript!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">Java</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>因此，它与模式 <code>\\bHello\\b</code> 相匹配，因为：</p><ol><li>字符串的开头符合第一个检查 <code>\\b</code>。</li><li>然后匹配了单词 <code>Hello</code>。</li><li>然后与 <code>\\b</code> 再次匹配，因为我们在 <code>o</code> 和逗号之间。</li></ol><p>所以模式 \\bHello\\b 会匹配，但 \\bHell\\b 不会匹配（因为在 l 之后没有单词边界），Java!\\b 也不会匹配（因为感叹号不是单词字符 \\w，所以其后没有词边界）。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Java!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">Hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Java!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">Java</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) );  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Java</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Java!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">Hell</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) );  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null（无匹配项）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Java!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">Java!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null（无匹配项）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>\\b</code> 既可以用于单词，也可以用于数字。 例如，模式 <code>\\b\\d\\d\\b</code> 查找独立的两位数。换句话说，它查找的是两位数，其周围是与 <code>\\w</code> 不同的字符，例如空格或标点符号（或文本开头/结尾）。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1 23 456 78&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 23,78</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12,34,56&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 12,34,56</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>词边界 <code>\\b</code> 不适用于非拉丁字母</strong> 词边界测试 <code>\\b</code> 检查该位置的一侧是否匹配 <code>\\w</code>，而另一侧则不匹配 “<code>\\w</code>”。 但是，<code>\\w</code> 表示拉丁字母 <code>a-z</code>（或数字或下划线），所以此检查不适用于其他字符，如西里尔字母（cyrillic letters）或象形文字（hieroglyphs）。</p><h2 id="转义-特殊字符" tabindex="-1">转义，特殊字符 <a class="header-anchor" href="#转义-特殊字符" aria-label="Permalink to &quot;转义，特殊字符&quot;">​</a></h2><p>正如我们所看到的，反斜杠 <code>\\</code> 用于表示字符类，例如 <code>\\d</code>。所以它是正则表达式中的一个特殊字符（就像在常规字符串中一样）。 还存在其它特殊字符，这些字符在正则表达式中有特殊的含义，例如 <code>[ ] { } ( ) \\ ^ $ . | ? * +</code>。它们用于执行更强大的搜索。</p><ol><li><strong>转义</strong><ol><li>假如我们想要找到一个点号 <code>.</code>。要将特殊字符用作常规字符，请在其前面加上反斜杠：<code>\\.</code>。</li><li>例如：</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chapter 5.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5.1（匹配了！）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chapter 511&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null（寻找一个真正的点 \\.）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>括号也是特殊字符，所以如果我们想要查找它们，我们应该使用 <code>\\(</code>。下面的例子会查找一个字符串 <code>&quot;g()&quot;</code>：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;function g()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">g</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\(\\)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;g()&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果我们想查找反斜杠 <code>\\</code>，我们就应该使用两个反斜杠：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;\\&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><strong>一个斜杠</strong><ol><li>斜杠符号 <code>&#39;/&#39;</code> 并不是一个特殊字符，但是它被用于在 Javascript 中开启和关闭正则匹配：<code>/...pattern.../</code>，所以我们也应该转义它。</li><li>搜索斜杠 <code>&#39;/&#39;</code> 的表达式：</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;/&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>从另一个方面看，如果我们没使用 <code>/.../</code>，而是使用另一种 <code>new RegExp</code> 的方式创建正则表达式，则不需要转义斜杠：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 找到了 /</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li><strong>new RegExp</strong><ol><li>如果我们使用 <code>new RegExp</code> 创建正则表达式，那么我们不必转义 <code>/</code>，但需要进行一些其他转义。</li><li>示例：</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d\\.\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chapter 5.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在之前的示例中我们使用 <code>/\\d\\.\\d/</code> 进行类似的搜索没问题，但 <code>new RegExp(&quot;\\d\\.\\d&quot;)</code> 不起作用，为什么？ 因为反斜杠被字符串“消耗”了。我们可能还记得，常规字符串有自己的特殊字符，例如 <code>\\n</code>，反斜杠用于转义。 下面是 “\\d.\\d” 的感知形式：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d\\.\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// d.d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在字符串中的反斜杠表示转义或者类似 <code>\\n</code> 这种只能在字符串中使用的特殊字符。这个引用会“消耗”并且解释这些字符，比如说：</p><ul><li><code>\\n</code> —— 变成一个换行字符，</li><li><code>\\u1234</code> —— 变成该编码所对应的 Unicode 字符，</li><li>……而当没有特殊含义时：如 <code>\\d</code> 或者 <code>\\z</code>，碰到这种情况时则会自动移除反斜杠。 所以调用 new RegExp 会获得一个没有反斜杠的字符串。这就是搜索不起作用的原因！ 如果要修复这个问题，我们需要双斜杠，因为引用会把 <code>\\\\</code> 变为 <code>\\</code>：</li></ul><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regStr); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \\d\\.\\d（现在对了）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regStr);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Chapter 5.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5.1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="集合和范围" tabindex="-1"><strong>集合和范围<code> [...]</code></strong> <a class="header-anchor" href="#集合和范围" aria-label="Permalink to &quot;**集合和范围\` [...]\`**&quot;">​</a></h2><p>在方括号 <code>[…]</code> 中的几个字符或者字符类表示“搜索给定字符中的任意一个”。</p><ol><li><strong>集合</strong><ol><li>例如，<code>[eao]</code> 表示以下 3 个字符中的任何一个：<code>&#39;a&#39;</code>、<code>&#39;e&#39;</code> 或 <code>&#39;o&#39;</code> 。</li><li>这就是所谓的 <strong>集合</strong>。在正则表达式中，可以将集合和常规字符一起使用。</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查找 [t 或 m]，然后匹配 &quot;op&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mop top&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[tm]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">op</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">gi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Mop&quot;, &quot;top&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>请注意，虽然集合中有多个字符，但它们在匹配中只会对应其中的一个。 所以在下面的示例中并没有匹配项：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查找 &quot;V&quot;，然后匹配 [o 或 i]，之后匹配 &quot;la&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Voila&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">V</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[oi]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">la</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null，无匹配项</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这个模式会搜索：</p><ul><li><code>V</code>，</li><li>然后匹配其中的 <strong>一个字符</strong> <code>[oi]</code>，</li><li>然后匹配 <code>la</code>。 所以可以匹配上 <code>Vola</code> 或者 <code>Vila</code>。</li></ul><ol start="2"><li><strong>范围</strong><ol><li>方括号也可以包含 <strong>字符范围</strong>。</li><li>例如，<code>[a-z]</code> 表示从 <code>a</code> 到 <code>z</code> 范围内的字符，<code>[0-5]</code> 表示从 <code>0</code> 到 <code>5</code> 的数字。</li><li>在下面的示例中，我们将搜索首先是 <code>&quot;x&quot;</code>，然后有两位数或两个在 <code>A</code> 到 <code>F</code> 范围内的字符紧随其后的字符串。</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Exception 0xAF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[0-9A-F][0-9A-F]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// xAF</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>[0-9A-F]</code> 中有两个范围：它搜索一个字符，该字符要么是在 <code>0</code> 到 <code>9</code> 范围内的数字，要么是从 <code>A</code> 到 <code>F</code> 的字母。 如果我们还想查找小写字母，则可以添加范围 <code>a-f</code>：<code>[0-9A-Fa-f]</code>。或添加标志 <code>i</code>。 我们也可以在 <code>[…]</code> 中使用字符类。 例如，如果我们想查找单词字符 <code>\\w</code> 或连字符 <code>-</code>，则集合可以写为 <code>[\\w-]</code>。 也可以组合多个类，例如 <code>[\\s\\d]</code> 表示“空格字符或数字”。 <strong>字符类是某些字符集合的简写</strong></p><ul><li><strong>\\d</strong> —— 和 <code>[0-9]</code> 相同，</li><li><strong>\\w</strong> —— 和 <code>[a-zA-Z0-9_]</code> 相同，</li><li><strong>\\s</strong> —— 和 <code>[\\t\\n\\v\\f\\r ]</code> 外加少量罕见的 Unicode 空格字符相同。</li></ul><ol start="3"><li><strong>示例：多语言 \\w</strong><ol><li>由于字符类 <code>\\w</code> 是简写的 <code>[a-zA-Z0-9_]</code>，因此无法找到中文象形文字，西里尔字母等。</li><li>我们可以编写一个更通用的模式，该模式可以查找任何语言中的单词字符。借助 Unicode 属性很容易实现：<code>[\\p{Alpha}\\p{M}\\p{Nd}\\p{Pc}\\p{Join_C}]</code>。</li><li>让我们理解一下。类似于 <code>\\w</code>，我们正在制作一组属于我们自己的包含具有以下 Unicode 属性的字符： <ul><li><code>Alphabetic</code> (<code>Alpha</code>) —— 字母，</li><li><code>Mark</code> (<code>M</code>) —— 音调，</li><li><code>Decimal_Number</code> (<code>Nd</code>) —— 数字，</li><li><code>Connector_Punctuation</code> (<code>Pc</code>) —— 下划线 <code>&#39;_&#39;</code> 和类似的字符，</li><li><code>Join_Control</code> (<code>Join_C</code>) —— 两个特殊代码 <code>200c</code> 和 <code>200d</code>，用于连字，例如阿拉伯语。</li></ul></li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regexp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{Alpha}</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{M}</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{Nd}</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{Pc}</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{Join_C}]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">gu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Hi 你好 12\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 找出所有字母和数字：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regexp) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// H,i,你,好,1,2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当然，我们可以编辑这个模式：添加 Unicode 属性或删除它们。<a href="https://zh.javascript.info/regexp-unicode" target="_blank" rel="noreferrer">Unicode：修饰符 &quot;u&quot; 和类 \\p{...}</a> 一文更详细地介绍了 Unicode 属性。 <strong>IE 浏览器不支持 Unicode 属性</strong> IE 浏览器未实现 Unicode 属性 <code>p{...}</code>。如果我们真的需要它们，可以使用库 <a href="http://xregexp.com/" target="_blank" rel="noreferrer">XRegExp</a>。 或者只是使用我们感兴趣的语言中的字符范围，例如西里尔字母范围 <code>[а-я]</code>。</p><ol start="4"><li><strong>排除范围</strong><ol><li>除了普通的范围匹配，还有像这样 <code>[^…]</code> 的“排除”范围匹配。</li><li>通过在开头添加插入符号 <code>^</code> 来表示匹配所有 <strong>除了给定的字符</strong> 之外的任意字符。 <ul><li><code>[^aeyo]</code> —— 匹配除了 <code>&#39;a&#39;</code>、<code>&#39;e&#39;</code>、<code>&#39;y&#39;</code> 或 <code>&#39;o&#39;</code> 之外的任何字符。</li><li><code>[^0-9]</code> —— 匹配除了数字之外的任何字符，与 <code>\\D</code> 作用相同。</li><li><code>[^\\s]</code> —— 匹配任何非空格字符，与 <code>\\S</code> 作用相同。</li></ul></li></ol></li><li><strong><code>[...]</code>中的转义</strong><ol><li>通常当我们想要准确地找到一个特殊字符时，我们需要像 <code>\\.</code> 这样对其进行转义。如果我们需要反斜杠，那么我们需要使用 <code>\\\\</code>，等等。</li><li>在方括号，我们可以使用绝大多数特殊字符而无需转义： <ul><li>符号 <code>. + ( )</code> 无需转义。</li><li>在开头或结尾（未定义范围）的连字符 <code>-</code> 不会被转义。</li><li>插入符号 <code>^</code> 仅在开头会被转义（表示排除）。</li><li>右方括号 <code>]</code> 总是会被转义（如果我们需要寻找那个符号）。</li></ul></li><li>除了在方括号中有特殊含义的字符外，其它所有特殊字符都是允许不转义的。</li><li>方括号中的点 <code>.</code> 表示的就是一个点。模式 <code>[.,]</code> 将会搜索字符之一：点或逗号。</li><li>在下面的示例中，正则表达式 <code>[-().^+]</code> 查找 <code>-().^+</code> 中的任何字符：</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不需要转义</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[-().^+]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1 + 2 - 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配 +，-</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>……但是如果你为了“以防万一”转义了它们，这也不会有任何问题：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转义其中的所有字符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[\\-</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\(\\)\\.\\^\\+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1 + 2 - 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 仍能正常工作：+，-</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="6"><li><strong>范围和修饰符 “u”</strong><ol><li>如果集合中有代理对（surrogate pairs），则需要标志 <code>u</code> 才能使它们正常工作。</li><li>让我们在字符串 <code>𝒳</code> 中查找 <code>[𝒳𝒴]</code>：</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;𝒳&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[𝒳𝒴]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显示了一个奇怪的字符，像 [?]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//（搜索执行不正确，返回了半个字符）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>结果不正确，因为默认情况下正则表达式“不知道”代理对。 正则表达式引擎认为 <code>[𝒳𝒴]</code> —— 不是两个字符，而是四个字符： 1. <code>𝒳</code> 的左半部分 <code>(1)</code>， 2. <code>𝒳</code> 的右半部分 <code>(2)</code>， 3. <code>𝒴</code> 的左半部分 <code>(3)</code>， 4. <code>𝒴</code> 的右半部分 <code>(4)</code>。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;𝒳𝒴&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;𝒳𝒴&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charCodeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 55349, 56499, 55349, 56500</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="量词-和-n" tabindex="-1">*<em>量词 +, <em>, ? 和 {n}</em></em> <a class="header-anchor" href="#量词-和-n" aria-label="Permalink to &quot;**量词 +, *, ? 和 {n}**&quot;">​</a></h2>`,92)]))}const g=i(e,[["render",t]]);export{c as __pageData,g as default};
