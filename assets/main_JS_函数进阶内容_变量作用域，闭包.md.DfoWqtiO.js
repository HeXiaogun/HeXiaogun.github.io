import{_ as i,c as n,o as a,ae as t}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-25T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/JS/函数进阶内容/变量作用域，闭包.md","filePath":"main/JS/函数进阶内容/变量作用域，闭包.md","lastUpdated":1746068392000}'),l={name:"main/JS/函数进阶内容/变量作用域，闭包.md"};function e(r,s,o,p,h,k){return a(),n("div",null,s[0]||(s[0]=[t(`<p>JavaScript 是一种非常面向函数的语言。 在 JavaScript 中，有三种声明变量的方式：<code>let</code>，<code>const</code>（现代方式），<code>var</code>（过去留下来的方式）</p><ol><li><strong>代码块</strong><ol><li>如果在代码块 <code>{...}</code> 内声明了一个变量，那么这个变量只在该代码块内可见</li></ol></li><li><strong>嵌套函数</strong><ol><li>如果一个函数是在另一个函数中创建的，该函数就被称为“嵌套”函数。</li></ol></li><li><strong>Step 1. 变量</strong><ol><li>在 JavaScript 中，每个运行的函数，代码块 <code>{...}</code> 以及整个脚本，都有一个被称为 <strong>词法环境（Lexical Environment）</strong> 的内部（隐藏）的关联对象。</li><li><strong>环境记录（Environment Record）</strong> —— 一个存储所有局部变量作为其属性（包括一些其他信息，例如 <code>this</code> 的值）的对象。</li><li>对 <strong>外部词法环境</strong> 的引用，与外部代码相关联。</li><li>词法环境是一个规范对象 <ol><li>“词法环境”是一个规范对象（specification object）：它只存在于 <a href="https://tc39.es/ecma262/#sec-lexical-environments" target="_blank" rel="noreferrer">语言规范</a> 的“理论”层面，用于描述事物是如何工作的。我们无法在代码中获取该对象并直接对其进行操作。</li></ol></li></ol></li><li><strong>Step 2. 函数声明</strong><ol><li><strong>不同之处在于函数声明的初始化会被立即完成。</strong></li></ol></li><li><strong>Step 3. 内部和外部的词法环境</strong><ol><li><strong>当代码要访问一个变量时 —— 首先会搜索内部词法环境，然后搜索外部环境，然后搜索更外部的环境，以此类推，直到全局词法环境。</strong></li></ol></li><li><strong>Step 4. 返回函数</strong><ol><li><strong>在变量所在的词法环境中更新变量。</strong></li></ol></li><li><strong>闭包</strong><ol><li><a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)" target="_blank" rel="noreferrer">闭包</a> 是指一个函数可以记住其外部变量并可以访问这些变量。在某些编程语言中，这是不可能的，或者应该以一种特殊的方式编写函数来实现。但如上所述，在 JavaScript 中，所有函数都是天生闭包的（只有一个例外，将在 <a href="https://zh.javascript.info/new-function" target="_blank" rel="noreferrer">&quot;new Function&quot; 语法</a> 中讲到）。</li></ol></li><li><strong>垃圾收集</strong><ol><li>函数调用完成后，会将词法环境和其中的所有变量从内存中删除</li><li>但是，如果有一个嵌套的函数在函数结束后仍可达，则它将具有引用词法环境的 <code>[[Environment]]</code> 属性。</li><li>当词法环境对象变得不可达时，它就会死去（就像其他任何对象一样）。换句话说，它仅在至少有一个嵌套函数引用它时才存在。</li></ol></li><li><strong>实际开发中的优化</strong><ol><li>如果从代码中可以明显看出有未使用的外部变量，那么就会将其删除。</li><li><strong>在 V8（Chrome，Edge，Opera）中的一个重要的副作用是，此类变量在调试中将不可用。</strong></li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayHi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Pete&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	sayHi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会显示 &quot;Pete&quot;？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,3)]))}const d=i(l,[["render",e]]);export{g as __pageData,d as default};
