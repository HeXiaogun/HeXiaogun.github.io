import{_ as o,c as t,o as l,ae as r}from"./chunks/framework.Dh1jimFm.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-29T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/JS/浏览器：文档，事件，接口/Document/节点属性：type，tag 和 content.md","filePath":"main/JS/浏览器：文档，事件，接口/Document/节点属性：type，tag 和 content.md","lastUpdated":1746068392000}'),d={name:"main/JS/浏览器：文档，事件，接口/Document/节点属性：type，tag 和 content.md"};function c(n,e,i,a,g,m){return l(),t("div",null,e[0]||(e[0]=[r('<ol><li><strong>DOM 节点类</strong><ol><li>不同的 DOM 节点可能有不同的属性。例如，标签 <code>&lt;a&gt;</code> 相对应的元素节点具有链接相关的（link-related）属性，标签 <code>&lt;input&gt;</code> 相对应的元素节点具有与输入相关的属性，等。</li><li>每个 DOM 节点都属于相应的内建类。</li><li>层次结构（hierarchy）的根节点是 <a href="https://dom.spec.whatwg.org/#eventtarget" target="_blank" rel="noreferrer">EventTarget</a>，<a href="https://dom.spec.whatwg.org/#interface-node" target="_blank" rel="noreferrer">Node</a> 继承自它，其他 DOM 节点继承自 Node。</li><li>类： <ul><li><a href="https://dom.spec.whatwg.org/#eventtarget" target="_blank" rel="noreferrer">EventTarget</a> —— 是一切的根“抽象（abstract）”类。 该类的对象从未被创建。它作为一个基础，以便让所有 DOM 节点都支持所谓的“事件（event）”，我们会在之后学习它。</li><li><a href="http://dom.spec.whatwg.org/#interface-node" target="_blank" rel="noreferrer">Node</a> —— 也是一个“抽象”类，充当 DOM 节点的基础。 它提供了树的核心功能：<code>parentNode</code>，<code>nextSibling</code>，<code>childNodes</code> 等（它们都是 getter）。<code>Node</code> 类的对象从未被创建。但是还有一些继承自它的其他类（因此继承了 <code>Node</code> 的功能）。</li><li><a href="https://dom.spec.whatwg.org/#interface-document" target="_blank" rel="noreferrer">Document</a> 由于历史原因通常被 <code>HTMLDocument</code> 继承（尽管最新的规范没有规定）—— 是一个整体的文档。 全局变量 <code>document</code> 就是属于这个类。它作为 DOM 的入口。</li><li><a href="https://dom.spec.whatwg.org/#interface-characterdata" target="_blank" rel="noreferrer">CharacterData</a> —— 一个“抽象”类，被下述类继承： <ul><li><a href="https://dom.spec.whatwg.org/#interface-text" target="_blank" rel="noreferrer">Text</a> —— 对应于元素内部文本的类，例如 <code>&lt;p&gt;Hello&lt;/p&gt;</code> 中的 <code>Hello</code>。</li><li><a href="https://dom.spec.whatwg.org/#interface-comment" target="_blank" rel="noreferrer">Comment</a> —— 注释类。它们不会被展示出来，但每个注释都会成为 DOM 中的一员。</li></ul></li><li><a href="http://dom.spec.whatwg.org/#interface-element" target="_blank" rel="noreferrer">Element</a> —— 是 DOM 元素的基础类。 它提供了元素级导航（navigation），如 <code>nextElementSibling</code>，<code>children</code>，以及搜索方法，如 <code>getElementsByTagName</code> 和 <code>querySelector</code>。 浏览器不仅支持 HTML，还支持 XML 和 SVG。因此，<code>Element</code> 类充当的是更具体的类的基础：<code>SVGElement</code>，<code>XMLElement</code>（我们在这里不需要它）和 <code>HTMLElement</code>。</li><li>最后，<a href="https://html.spec.whatwg.org/multipage/dom.html#htmlelement" target="_blank" rel="noreferrer">HTMLElement</a> —— 是所有 HTML 元素的基础类。我们大部分时候都会用到它。 它会被更具体的 HTML 元素继承： <ul><li><a href="https://html.spec.whatwg.org/multipage/forms.html#htmlinputelement" target="_blank" rel="noreferrer">HTMLInputElement</a> —— <code>&lt;input&gt;</code> 元素的类，</li><li><a href="https://html.spec.whatwg.org/multipage/semantics.html#htmlbodyelement" target="_blank" rel="noreferrer">HTMLBodyElement</a> —— <code>&lt;body&gt;</code> 元素的类，</li><li><a href="https://html.spec.whatwg.org/multipage/semantics.html#htmlanchorelement" target="_blank" rel="noreferrer">HTMLAnchorElement</a> —— <code>&lt;a&gt;</code> 元素的类，</li><li>……等。</li></ul></li></ul></li><li><code>console.dir(elem)</code> 与 <code>console.log(elem)</code><ol><li>它们是不同的： <ul><li><code>console.log(elem)</code> 显示元素的 DOM 树。</li><li><code>console.dir(elem)</code> 将元素显示为 DOM 对象，非常适合探索其属性。</li></ul></li></ol></li><li>规范中的 IDL <ol><li>在规范中，DOM 类不是使用 JavaScript 来描述的，而是一种特殊的 <a href="https://en.wikipedia.org/wiki/Interface_description_language" target="_blank" rel="noreferrer">接口描述语言（Interface description language）</a>，简写为 IDL，它通常很容易理解。</li></ol></li></ol></li><li><strong>“nodeType” 属性</strong><ol><li><code>nodeType</code> 属性提供了另一种“过时的”用来获取 DOM 节点类型的方法。</li><li>它有一个数值型值（numeric value）： <ul><li>对于元素节点 <code>elem.nodeType == 1</code>，</li><li>对于文本节点 <code>elem.nodeType == 3</code>，</li><li>对于 document 对象 <code>elem.nodeType == 9</code>，</li><li>在 <a href="https://dom.spec.whatwg.org/#node" target="_blank" rel="noreferrer">规范</a> 中还有一些其他值。</li></ul></li></ol></li><li><strong>标签：nodeName 和 tagName</strong><ol><li>给定一个 DOM 节点，我们可以从 <code>nodeName</code> 或者 <code>tagName</code> 属性中读取它的标签名</li><li>tagName 和 nodeName 之间有什么不同吗？ <ul><li><code>tagName</code> 属性仅适用于 <code>Element</code> 节点。</li><li><code>nodeName</code> 是为任意 <code>Node</code> 定义的：</li><li>对于元素，它的意义与 <code>tagName</code> 相同。</li><li>对于其他节点类型（text，comment 等），它拥有一个对应节点类型的字符串。</li><li><code>tagName</code> 仅受元素节点支持（因为它起源于 <code>Element</code> 类），而 <code>nodeName</code> 则可以说明其他节点类型。</li></ul></li><li>标签名称始终是大写的，除非是在 XML 模式下</li></ol></li><li><strong>innerHTML：内容</strong><ol><li><a href="https://w3c.github.io/DOM-Parsing/#the-innerhtml-mixin" target="_blank" rel="noreferrer">innerHTML</a> 属性允许将元素中的 HTML 获取为字符串形式。</li><li>如果 <code>innerHTML</code> 将一个 <code>&lt;script&gt;</code> 标签插入到 document 中 —— 它会成为 HTML 的一部分，但是不会执行。</li><li><strong>小心：“innerHTML+=” 会进行完全重写</strong><ol><li>我们可以使用 <code>elem.innerHTML+=&quot;more html&quot;</code> 将 HTML 附加到元素上。</li><li><code>innerHTML+=</code> 的作用 <ol><li>移除旧的内容。</li><li>然后写入新的 <code>innerHTML</code>（新旧结合）。</li><li><strong>因为内容已“归零”并从头开始重写，因此所有的图片和其他资源都将重写加载。</strong></li></ol></li></ol></li></ol></li><li><strong>outerHTML：元素的完整 HTML</strong><ol><li><code>outerHTML</code> 属性包含了元素的完整 HTML。就像 <code>innerHTML</code> 加上元素本身一样。</li><li><strong>与 <code>innerHTML</code> 不同，写入 <code>outerHTML</code> 不会改变元素。而是在 DOM 中替换它。</strong></li></ol></li><li><strong>nodeValue/data：文本节点内容</strong><ol><li><code>innerHTML</code> 属性仅对元素节点有效。</li><li>其他节点类型，例如文本节点，具有它们的对应项：<code>nodeValue</code> 和 <code>data</code> 属性。这两者在实际使用中几乎相同，只有细微规范上的差异。因此，我们将使用 <code>data</code>，因为它更短。</li></ol></li><li><strong>textContent：纯文本</strong><ol><li><code>textContent</code> 提供了对元素内的 <strong>文本</strong> 的访问权限：仅文本，去掉所有 <code>&lt;tags&gt;</code>。</li><li><strong>写入 <code>textContent</code> 要有用得多，因为它允许以“安全方式”写入文本。</strong></li><li><ul><li>使用 <code>textContent</code>，我们将其“作为文本”插入，所有符号（symbol）均按字面意义处理。</li></ul></li></ol></li><li><strong>“hidden” 属性</strong><ol><li>“hidden” 特性（attribute）和 DOM 属性（property）指定元素是否可见。</li><li>从技术上来说，<code>hidden</code> 与 <code>style=&quot;display:none&quot;</code> 做的是相同的事。但 <code>hidden</code> 写法更简洁。</li></ol></li><li><strong>更多属性</strong><ol><li>DOM 元素还有其他属性，特别是那些依赖于 class 的属性： <ul><li><code>value</code> —— <code>&lt;input&gt;</code>，<code>&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>（<code>HTMLInputElement</code>，<code>HTMLSelectElement</code>……）的 value。</li><li><code>href</code> —— <code>&lt;a href=&quot;...&quot;&gt;</code>（<code>HTMLAnchorElement</code>）的 href。</li><li><code>id</code> —— 所有元素（<code>HTMLElement</code>）的 “id” 特性（attribute）的值。</li><li>……以及更多其他内容……</li></ul></li></ol></li></ol>',1)]))}const p=o(d,[["render",c]]);export{h as __pageData,p as default};
