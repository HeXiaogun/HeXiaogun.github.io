import{_ as e,c as r,o as s,ae as n}from"./chunks/framework.DvccZNqS.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"main/面试题/react相关.md","filePath":"main/面试题/react相关.md","lastUpdated":1748442624000}'),a={name:"main/面试题/react相关.md"};function i(o,t,l,p,c,d){return s(),r("div",null,t[0]||(t[0]=[n('<ol><li><p><strong>React18有哪些更新</strong>？ 并发模式、更新render API、自动批处理、Suspense 支持SSR、startTransition、useTransition、useDeferredValue、useId、 提供给第三方库的 Hook</p></li><li><p><strong>JSX是什么，它和JS有什么区别</strong> JSX 是 JavaScript 语法的扩展，它允许编写类似于 HTML 的代码。它可以编译为常规的 JavaScript 函数调用，从而为创建组件标记提供了一种更好的方法。</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fzh-hans.reactjs.org%2Fdocs%2Fintroducing-jsx.html" title="https://link.juejin.cn?target=https%3A%2F%2Fzh-hans.reactjs.org%2Fdocs%2Fintroducing-jsx.html" target="_blank" rel="noreferrer">JSX 简介</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fzh-hans.reactjs.org%2Fdocs%2Fjsx-in-depth.html" title="https://link.juejin.cn?target=https%3A%2F%2Fzh-hans.reactjs.org%2Fdocs%2Fjsx-in-depth.html" target="_blank" rel="noreferrer">深入理解 JSX</a></li></ul></li><li><p><strong>简述React的生命周期</strong> React 的生命周期主要分为三个阶段：MOUNTING、RECEIVE_PROPS、UNMOUNTING <strong>组件挂载时</strong>（组件状态的初始化，读取初始 state 和 props 以及两个生命周期方法，只会在初始化时运行一次）：componentWillMount 会在 render 之前调用（在此调用 setState，是不会触发 re-render 的，而是会进行 state 的合并。因此此时的 this.state 不是最新的，在 render 中才可以获取更新后的 this.state。）componentDidMount 会在 render 之后调用 <strong>组件更新时</strong>（组件的更新过程是指父组件向下传递 props 或者组件自身执行 setState 方法时发生的一系列更新的动作）：</p><ul><li>组件自身的 state 更新，依次执行： <ul><li>shouldComponentUpdate（会接收需要更新的 props 和 state，让开发者增加必要的判断条件，在其需要的时候更新，不需要的时候不更新。如果返回的是 false，那么组件就不再向下执行生命周期方法。）</li><li>componentWillUpdate</li><li>render（能获取到最新的 this.state)</li><li>componentDidUpdate（能获取到最新的 this.state)</li></ul></li><li>父组件更新 props 而更新 <ul><li>componentWillReceiveProps（在此调用 setState，是不会触发 re-render 的，而是会进行 state 的合并。因此此时的 this.state 不是最新的，在 render 中才可以获取更新后的 this.state。</li><li>shouldComponentUpdate</li><li>componentWillUpdate</li><li>render</li><li>componentDidUpdate <strong>组件卸载时</strong>：componentWillMount（我们常常会在组件的卸载过程中执行一些清理方法，比如事件回收、清空定时器） 新版的生命周期函数增加了 getDerivedStateFromProps，这个生命周期其实就是将传入的 props 映射到 state 中。在 React 16.4 之后，这个函数每次会在 re-render 之前调用 <strong>getDerivedStateFromProps的作用是</strong>：</li><li>无条件的根据 prop 来更新内部 state，也就是只要有传入 prop 值， 就更新 state</li><li>只有 prop 值和 state 值不同时才更新 state 值。</li><li>但是盲目使用这个生命周期会有一些问题： 直接复制 props 到 state 上，如果 props 和 state 不一致就更新 state</li></ul></li></ul></li><li></li></ol>',1)]))}const u=e(a,[["render",i]]);export{g as __pageData,u as default};
