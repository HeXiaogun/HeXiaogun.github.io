import{_ as l,c as o,o as r,ae as i}from"./chunks/framework.Dh1jimFm.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-24T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/数据类型/字符串.md","filePath":"main/数据类型/字符串.md","lastUpdated":1746186059000}'),t={name:"main/数据类型/字符串.md"};function c(a,e,d,s,n,p){return r(),o("div",null,e[0]||(e[0]=[i('<p>在JS中，文本数据被以字符串形式存储，单个字符没有单独的类型。 字符串的内部格式始终是 <a href="https://en.wikipedia.org/wiki/UTF-16" target="_blank" rel="noreferrer">UTF-16</a>，它不依赖于页面编码。</p><ol><li>引号（Quotes） <ol><li>字符串可以包含在单引号、双引号或反引号中</li><li>反引号允许我们通过 <code>${…}</code> 将任何表达式嵌入到字符串中</li></ol></li><li>特殊字符 <ol><li>\\n：换行符</li><li>\\r： Windows 文本文件中，两个字符 \\r\\n 的组合代表一个换行。而在非 Windows 操作系统上，它就是 \\n。</li><li><code>\\&#39;</code>, <code>\\&quot;</code>：引号</li><li><code>\\\\</code>：反斜线</li><li><code>\\t</code>：制表符</li><li><code>\\b</code>, <code>\\f</code>, <code>\\v</code>：退格，换页，垂直标签 —— 为了兼容性，现在已经不使用了。</li><li>\\xXX：具有给定十六进制 Unicode <code>XX</code> 的 Unicode 字符，例如：<code>&#39;\\x7A&#39;</code> 和 <code>&#39;z&#39;</code> 相同。</li><li>\\uXXXX：以 UTF-16 编码的十六进制代码 <code>XXXX</code> 的 Unicode 字符，例如 <code>\\u00A9</code> —— 是版权符号 <code>©</code> 的 Unicode。它必须正好是 4 个十六进制数字。</li><li><code>\\u{X…XXXXXX}</code>（1 到 6 个十六进制字符）：<code>\\u{X…XXXXXX}</code>（1 到 6 个十六进制字符）</li></ol></li><li>字符串长度 length： <ol><li>alert( <code>My\\n</code>.length ); // 3</li><li><code>length</code> 是一个属性，所以是str.length，不是str.length()。</li></ol></li><li>访问字符 <ol><li>要获取在 <code>pos</code> 位置的一个字符，可以使用方括号 <code>[pos]</code> 或者调用 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank" rel="noreferrer">str.charAt(pos)</a> 方法。</li><li>alert( str[0] ); // 第一个字符</li><li>alert( str.charAt(0) ); // 第一个字符</li><li>alert( str[str.length - 1] ); // 最后一个字符</li><li>alert( str[1000] ); // undefined</li><li>alert( str.charAt(1000) ); // &#39;&#39;（空字符串）</li><li>也可以用 for...of遍历</li></ol></li><li>字符串是不可变的 <ol><li>在 JavaScript 中，字符串不可更改。改变字符是不可能的。</li><li>如果想改变的话，通常的解决方法是创建一个新的字符串，并将其分配给 <code>str</code> 而不是以前的字符串。</li></ol></li><li>改变大小写 <ol><li><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase" target="_blank" rel="noreferrer">toLowerCase()</a> 和 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase" target="_blank" rel="noreferrer">toUpperCase()</a> 方法可以改变大小写：</li></ol></li><li>查找子字符串 <ol><li>str.indexOf ， 如果没有找到，则返回 <code>-1</code>，否则返回匹配成功的位置 <ol><li>第一个方法是 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" target="_blank" rel="noreferrer">str.indexOf(substr, pos)</a>。：从给定位置 <code>pos</code> 开始，在 <code>str</code> 中查找 <code>substr</code></li><li>方法 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf" target="_blank" rel="noreferrer">str.lastIndexOf(substr, position)</a>，它从字符串的末尾开始搜索到开头。</li></ol></li><li>按位（bitwise）NOT 技巧 <ol><li>是 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT" target="_blank" rel="noreferrer">bitwise NOT</a> <code>~</code> 运算符。它将数字转换为 32-bit 整数（如果存在小数部分，则删除小数部分），然后对其二进制表示形式中的所有位均取反。</li></ol></li><li>includes，startsWith，endsWith <ol><li>方法 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String/includes" target="_blank" rel="noreferrer">str.includes(substr, pos)</a> 根据 <code>str</code> 中是否包含 <code>substr</code> 来返回 <code>true/false</code>。 pos是开始搜索的起始位置</li><li>方法 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith" target="_blank" rel="noreferrer">str.startsWith</a> 和 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith" target="_blank" rel="noreferrer">str.endsWith</a> 的功能与其名称所表示的意思相同： 是否xxx开头，xxx结尾</li></ol></li></ol></li><li>获取子字符串 <ol><li>str.slice(start [, end])：返回字符串从 <code>start</code> 到（但不包括）<code>end</code> 的部分。如果没得第二个参数默认到结尾。<code>start/end</code> 也有可能是负值。它们的意思是起始位置从字符串结尾计算</li><li>str.substring(start [, end])：返回字符串从 <code>start</code> 到（但不包括）<code>end</code> 的部分。这与 <code>slice</code> 几乎相同，但它允许 <code>start</code> 大于 <code>end</code>。负值会被看作0</li><li>substr(start, length)：从 start 开始获取长为 length 的字符串 允许 start 为负数</li></ol></li><li>比较字符串 <ol><li><a href="https://zh.javascript.info/comparison" target="_blank" rel="noreferrer">值的比较</a> 字符串按字母顺序逐字比较。</li><li>小写字母总是大于大写字母</li><li>带变音符号的字母存在“乱序”的情况</li><li>str.codePointAt(pos)：返回在 <code>pos</code> 位置的字符代码 <a href="https://en.wikipedia.org/wiki/UTF-16" target="_blank" rel="noreferrer">UTF-16</a></li><li>String.fromCodePoint(code)：通过数字 <code>code</code> 创建字符</li><li>调用 <a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noreferrer">str.localeCompare(str2)</a> 会根据语言规则返回一个整数 <ol><li><ul><li>如果 <code>str</code> 排在 <code>str2</code> 前面，则返回负数。</li></ul></li><li><ul><li>如果 <code>str</code> 排在 <code>str2</code> 后面，则返回正数。</li></ul></li><li><ul><li>如果它们在相同位置，则返回 <code>0</code>。</li></ul></li></ol></li></ol></li><li>内部，Unicode <ol><li>代理对 <ol><li>所有常用的字符都是一个 2 字节的代码</li><li>但 2 字节只允许 65536 个组合，这对于表示每个可能的符号是不够的。所以稀有的符号被称为“代理对”的一对 2 字节的符号编码。</li></ol></li><li>变音符号与规范化 <ol><li>有一些由基本字符组成的符号，在其上方/下方有一个标记</li><li>字母 <code>a</code> 可以是 <code>àáâäãåā</code> 的基本字符。最常见的“复合”字符在 UTF-16 表中都有自己的代码。但不是全部，因为可能的组合太多。</li><li></li></ol></li></ol></li></ol>',2)]))}const b=l(t,[["render",c]]);export{h as __pageData,b as default};
