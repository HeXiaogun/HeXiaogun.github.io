import{_ as i,c as r,o,ae as e}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"main/面试题/CSS相关.md","filePath":"main/面试题/CSS相关.md","lastUpdated":1748013350000}'),l={name:"main/面试题/CSS相关.md"};function d(n,t,g,a,p,s){return o(),r("div",null,t[0]||(t[0]=[e('<ol><li><p><strong>CSS盒模型，在不同浏览器的差异</strong><strong>css 标准盒子模型</strong> css盒子模型 又称为框模型（Box Model），包含了元素内容（content）、内边距（padding）、边框（border）、外边距（margin）几个要素。</p><p>内层是content依次是padding border margin。通常我们设置背景时就是内容、内边距、边框这三部分，如果border设置颜色的时候会显示boder颜色当boder颜色是透明时会显示background-color的颜色。而该元素的子元素的是从content开始的。而外边距是透明的，不会遮挡其他元素。</p><p>元素框的总宽度=width+padding-left+padding-right+border-left+border-right+margin-left+margin-right; 元素框的总高度=height+padding-top+padding-bottom+border-top+border-bottom+margin-top+margin-bottom;</p><p><strong>IE盒子模型</strong> 图中的内层是content依次是content padding border。通常我们设置背景时就是内容、内边距、边框这三部分。而外边距是透明的，不会遮挡其他元素。</p><p>元素框的总宽度=width（padding-left+padding-right+border-left+border-right)；   元素框的总高度=height（padding-top+padding-bottom+border-top+border-bottom）; <strong>两个模型宽度和高度的计算（是不一样的）</strong> w3c中的盒子模型的宽:包括margin+border+padding+width; width:margin<em>2+border</em>2+padding<em>2+width; height:margin</em>2+border<em>2+padding</em>2+height;   iE中的盒子模型的width:包括border+padding+width; 上面的两个宽度相加的属性是一样的。 因此我们应该选择标准盒子模型，在网页的顶部加上 DOCTYPE 声明。</p></li><li><p><strong>CSS所有选择器及其优先级、使用场景，哪些可以继承，如何运用at规则</strong><strong>css选择器种类有：</strong> 通用选择器：* id选择器：#header{} class选择器：.header{} 元素选择器：div{} 子选择器：ul &gt; li{} 后代选择器：div p{} 伪类选择器：:hover、::selection、.action、:first-child、:last-child、:first-of-type、:last-of-type、:nth-of-type(n)、:nth-of-last-type(n)等,例如a:hover{} 伪元素选择器:  :after、:before等,例如：li:after 属性选择器: input[type=&quot;text&quot;] 组合选择器：E,F/E F（后代选择器）/E&gt;F（子元素选择器）/E+F（直接相邻元素选择器----匹配之后的相邻同级元素）/E~F（普通相邻元素选择器----匹配之后的同级元素） 层次选择器：p~ul 选择前面有p元素的每个ul元素 <strong>css选择器优先级：</strong></p><ul><li>选择器优先级由高到低分别为：<br> !important &gt; 作为style属性写在元素标签上的内联样式 &gt;id选择器&gt;类选择器&gt;伪类选择器&gt;属性选择器&gt;标签选择器&gt; 通配符选择器（* 应少用）&gt;浏览器自定义；</li></ul></li></ol><ul><li>当比较多个相同级别的CSS选择器优先级时，它们定义的位置将决定一切。下面从位置上将CSS优先级由高到低分为六级： <ol><li>位于标签里的中所定义的CSS拥有最高级的优先权。</li><li>第二级的优先属性由位于 标签中的 @import 引入样式表所定义。</li><li>第三级的优先属性由标签所引入的样式表定义。</li><li>第四级的优先属性由标签所引入的样式表内的 @import 导入样式表定义。</li><li>第五级优先的样式有用户设定。</li><li>最低级的优先权由浏览器默认。 <strong>使用场景</strong>：</li></ol><ul><li>选择器优先级由高到低分别为：<br> !important &gt; 作为style属性写在元素标签上的内联样式 &gt;id选择器&gt;类选择器&gt;伪类选择器&gt;属性选择器&gt;标签选择器&gt; 通配符选择器（* 应少用）&gt;浏览器自定义；</li><li>当比较多个相同级别的CSS选择器优先级时，它们定义的位置将决定一切。下面从位置上将CSS优先级由高到低分为六级： <ol><li>位于标签里的中所定义的CSS拥有最高级的优先权。</li><li>第二级的优先属性由位于 标签中的 @import 引入样式表所定义。</li><li>第三级的优先属性由标签所引入的样式表定义。</li><li>第四级的优先属性由标签所引入的样式表内的 @import 导入样式表定义。</li><li>第五级优先的样式有用户设定。 6、最低级的优先权由浏览器默认。</li></ol></li></ul></li></ul><ol start="2"><li>a</li></ol>',3)]))}const h=i(l,[["render",d]]);export{c as __pageData,h as default};
