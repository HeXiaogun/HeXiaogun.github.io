import{_ as l,c as o,o as i,ae as c}from"./chunks/framework.Dh1jimFm.js";const n=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-21T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/基础知识/逻辑运算符.md","filePath":"main/基础知识/逻辑运算符.md","lastUpdated":1746186059000}'),d={name:"main/基础知识/逻辑运算符.md"};function a(t,e,r,_,p,s){return i(),o("div",null,e[0]||(e[0]=[c("<p>JavaScript 中有四个逻辑运算符：<code>||</code>（或），<code>&amp;&amp;</code>（与），<code>!</code>（非），<code>??</code>（空值合并运算符）</p><ol><li>||（或） <ol><li>如果参与运算的任意一个参数为 <code>true</code>，返回的结果就为 <code>true</code>，否则返回 <code>false</code></li><li>从左到右依次计算操作数。</li><li>处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>true</code>，就停止计算，返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过（也就是，转换结果都是 <code>false</code>），则返回最后一个操作数。</li><li>一些用法 <ol><li>获取变量列表或者表达式中的第一个真值。</li><li>短路求值（Short-circuit evaluation）。</li></ol></li></ol></li><li>&amp;&amp;（与） <ol><li>当两个操作数都是真值时，与运算返回 <code>true</code>，否则返回 <code>false</code></li></ol></li><li>与运算寻找第一个假值 <ol><li><ul><li>从左到右依次计算操作数。</li></ul></li><li>在处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>false</code>，就停止计算，并返回这个操作数的初始值。</li><li><ul><li>如果所有的操作数都被计算过（例如都是真值），则返回最后一个操作数。</li></ul></li></ol></li><li>与运算 <code>&amp;&amp;</code> 的优先级比或运算 <code>||</code> 要高。</li><li>不要用 <code>||</code> 或 <code>&amp;&amp;</code> 来取代 <code>if</code></li><li>!（非） <ol><li><ol><li>将操作数转化为布尔类型：<code>true/false</code>。返回相反的值。</li></ol></li><li>非运算符 <code>!</code> 的优先级在所有逻辑运算符里面最高，所以它总是在 <code>&amp;&amp;</code> 和 <code>||</code> 之前执行。</li></ol></li></ol>",2)]))}const u=l(d,[["render",a]]);export{n as __pageData,u as default};
