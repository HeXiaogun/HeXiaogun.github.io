import{_ as o,c as i,o as t,ae as a}from"./chunks/framework.Dh1jimFm.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-26T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/Promise，async，await/微任务（Microtask）.md","filePath":"main/Promise，async，await/微任务（Microtask）.md","lastUpdated":1746186059000}'),r={name:"main/Promise，async，await/微任务（Microtask）.md"};function s(l,e,c,n,d,_){return t(),i("div",null,e[0]||(e[0]=[a("<p>promise 的处理程序 <code>.then</code>、<code>.catch</code> 和 <code>.finally</code> 都是异步的</p><ol><li><strong>微任务队列（Microtask queue）</strong><ol><li>异步任务需要适当的管理。为此，ECMA 标准规定了一个内部队列 <code>PromiseJobs</code>，通常被称为“微任务队列（microtask queue）”（V8 术语）。 <ul><li>队列（queue）是先进先出的：首先进入队列的任务会首先运行。</li><li><ul><li>只有在 JavaScript 引擎中没有其它任务在运行时，才开始执行任务队列中的任务。</li></ul></li></ul></li><li><strong>如果执行顺序对我们很重要该怎么办？我们怎么才能让 <code>code finished</code> 在 <code>promise done</code> 之后出现呢？</strong><ol><li>使用 <code>.then</code> 将其放入队列</li></ol></li></ol></li><li><strong>未处理的 rejection</strong><ol><li><strong>如果一个 promise 的 error 未被在微任务队列的末尾进行处理，则会出现“未处理的 rejection”。</strong></li><li></li></ol></li></ol>",2)]))}const u=o(r,[["render",s]]);export{p as __pageData,u as default};
