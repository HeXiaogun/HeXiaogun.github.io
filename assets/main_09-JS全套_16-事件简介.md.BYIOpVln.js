import{_ as o,c as l,o as t,ae as i}from"./chunks/framework.Dh1jimFm.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{"tags":["js"]},"headers":[],"relativePath":"main/09-JS全套/16-事件简介.md","filePath":"main/09-JS全套/16-事件简介.md","lastUpdated":1746534234000}'),n={name:"main/09-JS全套/16-事件简介.md"};function c(d,e,r,s,a,u){return t(),l("div",null,e[0]||(e[0]=[i('<h2 id="浏览器事件简介" tabindex="-1">浏览器事件简介 <a class="header-anchor" href="#浏览器事件简介" aria-label="Permalink to &quot;浏览器事件简介&quot;">​</a></h2><ol><li><strong>事件</strong> 是某事发生的信号。所有的 DOM 节点都生成这样的信号（但事件不仅限于 DOM）。 <ol><li><strong>鼠标事件</strong><ul><li><code>click</code> —— 当鼠标点击一个元素时（触摸屏设备会在点击时生成）。</li><li><code>contextmenu</code> —— 当鼠标右键点击一个元素时。</li><li><code>mouseover</code> / <code>mouseout</code> —— 当鼠标指针移入/离开一个元素时。</li><li><code>mousedown</code> / <code>mouseup</code> —— 当在元素上按下/释放鼠标按钮时。</li><li><code>mousemove</code> —— 当鼠标移动时。</li></ul></li><li><strong>键盘事件</strong><ul><li><code>keydown</code> 和 <code>keyup</code> —— 当按下和松开一个按键时。</li></ul></li><li><strong>表单（form）元素事件</strong><ul><li><code>submit</code> —— 当访问者提交了一个 <code>&lt;form&gt;</code> 时。</li><li><code>focus</code> —— 当访问者聚焦于一个元素时，例如聚焦于一个 <code>&lt;input&gt;</code>。</li></ul></li><li><strong>Document 事件</strong><ul><li><code>DOMContentLoaded</code> —— 当 HTML 的加载和处理均完成，DOM 被完全构建完成时。</li></ul></li><li><strong>CSS 事件</strong><ol><li><ul><li><code>transitionend</code> —— 当一个 CSS 动画完成时。</li></ul></li></ol></li></ol></li><li><strong>事件处理程序</strong><ol><li>为了对事件作出响应，我们可以分配一个 <strong>处理程序（handler）</strong>—— 一个在事件发生时运行的函数。</li><li>处理程序是在发生用户行为（action）时运行 JavaScript 代码的一种方式。</li></ol></li><li><strong>HTML 特性</strong><ol><li>在鼠标点击时，<code>onclick</code> 中的代码就会运行。</li><li>，在 <code>onclick</code> 中，我们使用单引号，因为特性本身使用的是双引号。如果我们忘记了代码是在特性中的，而使用了双引号，像这样：<code>onclick=&quot;alert(&quot;Click!&quot;)&quot;</code>，那么它就无法正确运行。</li></ol></li><li>DOM <strong>属性</strong><ol><li>我们可以使用 DOM 属性（property）<code>on&lt;event&gt;</code> 来分配处理程序。</li></ol></li><li><strong>访问元素：this</strong><ol><li>处理程序中的 <code>this</code> 的值是对应的元素。就是处理程序所在的那个元素。</li></ol></li><li><strong>可能出现的错误</strong><ol><li>函数应该是以 <code>sayThanks</code> 的形式进行赋值，而不是 <code>sayThanks()</code>。</li><li><strong>不要对处理程序使用 <code>setAttribute</code>。</strong></li><li><strong>DOM 属性是大小写敏感的。</strong></li></ol></li><li><strong>addEventListener</strong><ol><li>我们不能为一个事件分配多个处理程序。</li><li>element.addEventListener(event, handler[, options]); <ul><li><code>once</code>：如果为 <code>true</code>，那么会在被触发后自动删除监听器。</li><li><code>capture</code>：事件处理的阶段，我们稍后将在 <a href="https://zh.javascript.info/bubbling-and-capturing" target="_blank" rel="noreferrer">冒泡和捕获</a> 一章中介绍。由于历史原因，<code>options</code> 也可以是 <code>false/true</code>，它与 <code>{capture: false/true}</code> 相同。</li><li><code>passive</code>：如果为 <code>true</code>，那么处理程序将不会调用 <code>preventDefault()</code>，我们稍后将在 <a href="https://zh.javascript.info/default-browser-action" target="_blank" rel="noreferrer">浏览器默认行为</a> 一章中介绍。</li></ul></li><li>移除需要相同的函数 <ol><li>要移除处理程序，我们需要传入与分配的函数完全相同的函数。</li><li>对于某些事件，只能通过 addEventListener 设置处理程序</li></ol></li></ol></li><li><strong>事件对象</strong><ol><li>当事件发生时，浏览器会创建一个 <strong><code>event</code> 对象</strong>，将详细信息放入其中，并将其作为参数传递给处理程序。</li><li>event.type：事件类型</li><li>event.currentTarget：处理事件的元素。</li><li>event.clientX / event.clientY：指针事件（pointer event）的指针的窗口相对坐标。</li><li><code>event</code> 对象在 HTML 处理程序中也可用</li></ol></li><li><strong>对象处理程序：handleEvent</strong><ol><li>当事件发生时，就会调用该对象的 <code>handleEvent</code> 方法。</li><li>请注意，我们需要使用 <code>addEventListener</code> 来显式设置事件，以指明要监听的事件。这里的 <code>menu</code> 对象只监听 <code>mousedown</code> 和 <code>mouseup</code>，而没有任何其他类型的事件。</li></ol></li></ol>',2)]))}const _=o(n,[["render",c]]);export{p as __pageData,_ as default};
