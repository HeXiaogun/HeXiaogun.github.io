import{_ as s,c as a,o as l,ae as e}from"./chunks/framework.Dh1jimFm.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{"date":"2025-04-20T00:00:00.000Z","tags":["js"]},"headers":[],"relativePath":"main/JS/基础知识/基础运算符，数学运算.md","filePath":"main/JS/基础知识/基础运算符，数学运算.md","lastUpdated":1746068392000}'),n={name:"main/JS/基础知识/基础运算符，数学运算.md"};function t(p,i,d,h,o,k){return l(),a("div",null,i[0]||(i[0]=[e(`<ol><li><p>一元运算符，二元运算符，运算元</p><ol><li>运算元：运算符应用的对象，比如说乘法运算 <code>5 * 2</code>，有两个运算元：左运算元 <code>5</code> 和右运算元 <code>2</code>。有时候人们也称其为“参数”而不是“运算元”。</li><li>一元运算符：一个运算符对应的只有一个运算元，比如负号</li><li>一个运算符拥有两个运算元，比如减号</li></ol></li><li><p>数学运算</p><ol><li>支持加减乘除，取余，求幂</li><li>取余：%</li><li>求幂：**，例如：<code>a ** b</code> 将 <code>a</code> 提升至 <code>a</code> 的 <code>b</code> 次幂，其表示为 ab</li></ol></li><li><p>用二元运算符 + 连接字符串</p><ol><li>如果加号 <code>+</code> 被应用于字符串，它将合并（连接）各个字符串，只要任意一个运算元是字符串，那么另一个运算元也将被转化为字符串。</li><li>二元 <code>+</code> 是唯一一个以这种方式支持字符串的运算符。其他算术运算符会将其转换成数字运算</li></ol></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;12&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;21&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;41&quot;，不是 &quot;221&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;122&quot;，不是 &quot;14&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="4"><li><p>数字转化，一元运算符 +</p><ol><li>加号 <code>+</code> 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 <code>+</code> 则会将其转化为数字。</li><li>效果和 <code>Number(...)</code> 相同，但是更加简短。</li></ol></li><li><p>运算符优先级 ……&gt;一元加号（+），一元负号（-）&gt;求幂（<code>**</code>）&gt;乘号（<code>*</code>），除号（/）&gt;加号（+），减号（-）&gt;……&gt;赋值符（=）&gt;……</p></li><li><p>赋值运算符 =，优先级较低</p><ol><li>链式赋值（Chaining assignments） 例如：<code>let</code> a<code>,</code> b<code>,</code> c<code>;</code><em>a <code>=</code> b <code>=</code> c <code>=</code> <code>2</code> <code>+</code> <code>2\`\`;</code></em> a=4，b=4，c=4</li></ol></li><li><p>原地修改</p></li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在 n = 7（等同于 n = n + 5）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在 n = 14（等同于 n = n * 2）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( n ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 14</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="7"><li>自增/自减 <ol><li>counter++ 相当于 counter = counter + 1</li><li>counter-- 相当于 counter = counter - 1</li><li>自增/自减只能应用于变量。试一下，将其应用于数值（比如 <code>5++</code>）则会报错。</li><li>运算符 <code>++</code> 和 <code>--</code> 可以置于变量前，也可以置于变量后。但是是有区别的 <ol><li><code>++</code>counter //2 立刻使用自增后的值</li><li>counter<code>++</code> //1 使用其自增之前的值</li></ol></li><li><code>++/--</code> 运算符同样可以在表达式内部使用。它们的优先级比绝大部分的算数运算符要高。</li></ol></li><li>位运算符 <ol><li>位运算符把运算元当做 32 位整数，并在它们的二进制表现形式上操作。</li><li>按位与 &amp;、按位或 | 、按位异或 ^ 、按位非 ~ 、左移&lt;&lt; 、右移 &gt;&gt; 、无符号右移 &gt;&gt;&gt;</li></ol></li><li>逗号运算符 <ol><li>let a = (1 + 2, 3 + 4); //结果为7 这里，第一个表达式 <code>1 + 2</code> 运行了，但是它的结果被丢弃了。随后计算 <code>3 + 4</code>，并且该计算结果被返回。</li><li>请注意逗号运算符的优先级非常低，比 <code>=</code> 还要低，因此上面你的例子中圆括号非常重要，如果没有圆括号：<code>a = 1 + 2, 3 + 4</code> 会先执行 <code>+</code>，将数值相加得到 <code>a = 3, 7</code>，然后赋值运算符 <code>=</code> 执行 <code>a = 3</code>，然后逗号之后的数值 <code>7</code> 不会再执行，它被忽略掉了。相当于 <code>(a = 1 + 2), 3 + 4</code>。</li></ol></li></ol>`,5)]))}const g=s(n,[["render",t]]);export{r as __pageData,g as default};
